import { Component, Input, NgModule, ApplicationRef, ComponentFactoryResolver, Injectable, Injector, ElementRef, Inject, Directive, Renderer, HostBinding, ChangeDetectorRef, ViewChild, EventEmitter, forwardRef, NgZone, Output, ContentChildren, Renderer2, Optional, PLATFORM_ID, HostListener, ViewContainerRef, ViewEncapsulation, ContentChild } from '@angular/core';
import { CommonModule, isPlatformBrowser } from '@angular/common';
import { NG_VALUE_ACCESSOR, NgControl, FormsModule } from '@angular/forms';
import { interval, fromEvent, Observable } from 'rxjs';
import { first, skipWhile, map, publishReplay, refCount, startWith } from 'rxjs/operators';
import { animate, style, transition, trigger } from '@angular/animations';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/forms';

const _c0 = ["cardAction"];
const _c1 = ["cardImage"];
const _c2 = ["cardTitle"];
function MzCardComponent_div_0_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵprojection(1, 2);
    ɵngcc0.ɵɵelementEnd();
} }
function MzCardComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 4, 5);
    ɵngcc0.ɵɵprojection(2, 1);
    ɵngcc0.ɵɵtemplate(3, MzCardComponent_div_0_div_3_Template, 2, 0, "div", 2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.hasCardImageTitle);
} }
function MzCardComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6, 7);
    ɵngcc0.ɵɵprojection(2, 3);
    ɵngcc0.ɵɵelementEnd();
} }
function MzCardComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 8, 9);
    ɵngcc0.ɵɵprojection(2, 4);
    ɵngcc0.ɵɵelementEnd();
} }
const _c3 = [[["mz-card-content"]], [["mz-card-image"]], [["mz-card-image-title"]], [["mz-card-title"]], [["mz-card-action"]]];
const _c4 = ["mz-card-content", "mz-card-image", "mz-card-image-title", "mz-card-title", "mz-card-action"];
const _c5 = ["*"];
function MzChipComponent_i_1_Template(rf, ctx) { if (rf & 1) {
    const _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "i", 1);
    ɵngcc0.ɵɵlistener("click", function MzChipComponent_i_1_Template_i_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.onDelete(); });
    ɵngcc0.ɵɵtext(1, "close");
    ɵngcc0.ɵɵelementEnd();
} }
const _c6 = [[["mz-collapsible-item-header"]], [["mz-collapsible-item-body"]]];
const _c7 = ["mz-collapsible-item-header", "mz-collapsible-item-body"];
const _c8 = ["collapsible"];
const _c9 = ["modal"];
const _c10 = [[["mz-modal-header"]], [["mz-modal-content"]], [["mz-modal-footer"]]];
const _c11 = ["mz-modal-header", "mz-modal-content", "mz-modal-footer"];
function MzPaginationComponent_mz_pagination_page_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mz-pagination-page-button", 2);
    ɵngcc0.ɵɵelementStart(1, "a", 3);
    ɵngcc0.ɵɵlistener("click", function MzPaginationComponent_mz_pagination_page_button_1_Template_a_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.firstPage(); });
    ɵngcc0.ɵɵelement(2, "i", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r0.currentPage === 1);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("icon", "first_page");
} }
function MzPaginationComponent_mz_pagination_page_button_5_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mz-pagination-page-button", 6);
    ɵngcc0.ɵɵelementStart(1, "a", 3);
    ɵngcc0.ɵɵlistener("click", function MzPaginationComponent_mz_pagination_page_button_5_Template_a_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r7); const page_r5 = ctx.$implicit; const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.changeCurrentPage(page_r5); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const page_r5 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("active", page_r5 === ctx_r1.currentPage);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(page_r5);
} }
function MzPaginationComponent_mz_pagination_page_button_9_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mz-pagination-page-button", 2);
    ɵngcc0.ɵɵelementStart(1, "a", 3);
    ɵngcc0.ɵɵlistener("click", function MzPaginationComponent_mz_pagination_page_button_9_Template_a_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.lastPage(); });
    ɵngcc0.ɵɵelement(2, "i", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r2.currentPage === ctx_r2.totalPages);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("icon", "last_page");
} }
const _c12 = ["parallax"];
const _c13 = ["parallaxContainer"];
function MzErrorMessageComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("@enterAnimation", ctx_r0.errorMessage);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.errorMessage);
} }
const _c14 = [[["mz-sidenav-collapsible-header"]], [["mz-sidenav-collapsible-content"]]];
const _c15 = ["mz-sidenav-collapsible-header", "mz-sidenav-collapsible-content"];
const _c16 = ["tabs"];
function MzTabComponent_li_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 3);
    ɵngcc0.ɵɵelementStart(1, "a", 4);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const tabItem_r2 = ctx.$implicit;
    ɵngcc0.ɵɵclassProp("disabled", tabItem_r2.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("active", tabItem_r2.active);
    ɵngcc0.ɵɵpropertyInterpolate("href", tabItem_r2.href ? tabItem_r2.href : "#" + tabItem_r2.link, ɵngcc0.ɵɵsanitizeUrl);
    ɵngcc0.ɵɵpropertyInterpolate("target", tabItem_r2.target);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", tabItem_r2.label, " ");
} }
const _c17 = [[["mz-tab-item"]]];
const _c18 = ["mz-tab-item"];
class MzBadgeComponent {
}
MzBadgeComponent.ɵfac = function MzBadgeComponent_Factory(t) { return new (t || MzBadgeComponent)(); };
MzBadgeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzBadgeComponent, selectors: [["mz-badge"]], inputs: { badgeClass: "badgeClass", caption: "caption", new: "new", value: "value" }, decls: 3, vars: 7, consts: [["badge", ""]], template: function MzBadgeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", null, 0);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("badge ", ctx.badgeClass, "");
        ɵngcc0.ɵɵclassProp("new", ctx.new || !!ctx.badgeClass);
        ɵngcc0.ɵɵattribute("data-badge-caption", ctx.caption);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.value, "\n");
    } }, styles: [""] });
/** @nocollapse */
MzBadgeComponent.propDecorators = {
    "badgeClass": [{ type: Input },],
    "caption": [{ type: Input },],
    "new": [{ type: Input },],
    "value": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzBadgeComponent, [{
        type: Component,
        args: [{
                selector: 'mz-badge',
                template: `<span #badge
  class="badge {{ badgeClass }}"
  [class.new]="new || !!badgeClass"
  [attr.data-badge-caption]="caption">
  {{ value }}
</span>
`,
                styles: [``]
            }]
    }], null, { badgeClass: [{
            type: Input
        }], caption: [{
            type: Input
        }], new: [{
            type: Input
        }], value: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzBadgeModule {
}
MzBadgeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzBadgeModule });
MzBadgeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzBadgeModule_Factory(t) { return new (t || MzBadgeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzBadgeModule, { declarations: [MzBadgeComponent], exports: [MzBadgeComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzBadgeModule, [{
        type: NgModule,
        args: [{
                declarations: [MzBadgeComponent],
                exports: [MzBadgeComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
class Handlers {
}
class HandlePropChanges {
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.handlers) {
            this.executePropHandlers(changes);
        }
    }
    /**
     * @param {?=} props
     * @return {?}
     */
    executePropHandlers(props = this.handlers) {
        Object.keys(props).forEach(prop => {
            if (this.handlers[prop]) {
                const /** @type {?} */ previousValue = (/** @type {?} */ (props[prop])).previousValue;
                this.handlers[prop](previousValue);
            }
        });
    }
}
HandlePropChanges.ɵfac = function HandlePropChanges_Factory(t) { return new (t || HandlePropChanges)(); };
HandlePropChanges.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: HandlePropChanges, features: [ɵngcc0.ɵɵNgOnChangesFeature] });


/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzInjectionService {
    /**
     * @param {?} applicationRef
     * @param {?} componentFactoryResolver
     * @param {?} injector
     */
    constructor(applicationRef, componentFactoryResolver, injector) {
        this.applicationRef = applicationRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
    }
    /**
     * Appends a component to an adjacent location.
     * @template T
     * @param {?} componentClass
     * @param {?=} options
     * @param {?=} location
     * @return {?}
     */
    appendComponent(componentClass, options = {}, location = this.getContainerElement()) {
        // instantiate component to load
        const /** @type {?} */ componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentClass);
        const /** @type {?} */ componentRef = componentFactory.create(this.injector);
        // project the options passed to the component instance
        this.projectComponentInputs(componentRef, options);
        // attach view for dirty checking
        this.applicationRef.attachView(componentRef.hostView);
        // detach view when component is destroyed
        componentRef.onDestroy(() => {
            this.applicationRef.detachView(componentRef.hostView);
        });
        // append component to location in the DOM where we want it to be rendered
        const /** @type {?} */ componentRootNode = this.getComponentRootNode(componentRef);
        location.appendChild(componentRootNode);
        return componentRef;
    }
    /**
     * Overrides the default container element.
     * @param {?} container
     * @return {?}
     */
    setRootViewContainer(container) {
        this.container = container;
    }
    /**
     * Gets the html element for a component ref.
     * @param {?} componentRef
     * @return {?}
     */
    getComponentRootNode(componentRef) {
        return /** @type {?} */ ((/** @type {?} */ (componentRef.hostView)).rootNodes[0]);
    }
    /**
     * Gets the container element.
     * @return {?}
     */
    getContainerElement() {
        return this.container || document.body;
    }
    /**
     * Projects the inputs onto the component.
     * @template T
     * @param {?} component
     * @param {?} options
     * @return {?}
     */
    projectComponentInputs(component, options) {
        if (options) {
            const /** @type {?} */ props = Object.getOwnPropertyNames(options);
            for (const /** @type {?} */ prop of props) {
                component.instance[prop] = options[prop];
            }
        }
        return component;
    }
}
MzInjectionService.ɵfac = function MzInjectionService_Factory(t) { return new (t || MzInjectionService)(ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
MzInjectionService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MzInjectionService, factory: MzInjectionService.ɵfac });
/** @nocollapse */
MzInjectionService.ctorParameters = () => [
    { type: ApplicationRef, },
    { type: ComponentFactoryResolver, },
    { type: Injector, },
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzInjectionService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.ApplicationRef }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.Injector }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzInjectionModule {
}
MzInjectionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzInjectionModule });
MzInjectionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzInjectionModule_Factory(t) { return new (t || MzInjectionModule)(); }, providers: [MzInjectionService] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzInjectionModule, [{
        type: NgModule,
        args: [{
                providers: [MzInjectionService]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
class MzRemoveComponentHost {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.childrenElement = [];
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        const /** @type {?} */ hostElement = this.elementRef.nativeElement;
        this.parentElement = hostElement.parentElement;
        // move child out of the host element
        while (hostElement.firstChild) {
            this.childrenElement.push(this.parentElement.insertBefore(hostElement.firstChild, hostElement));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // remove moved out element
        this.childrenElement.forEach(childElement => this.parentElement.removeChild(childElement));
    }
}
MzRemoveComponentHost.ɵfac = function MzRemoveComponentHost_Factory(t) { return new (t || MzRemoveComponentHost)(ɵngcc0.ɵɵdirectiveInject(ElementRef)); };
MzRemoveComponentHost.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzRemoveComponentHost });
/** @nocollapse */
MzRemoveComponentHost.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] },] },
];


/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzButtonDirective extends HandlePropChanges {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        super();
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initHandlers();
        this.initMaterialize();
        super.executePropHandlers();
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            disabled: () => this.handleDisabled(),
            flat: () => this.handleFlat(),
            float: () => this.handleFloat(),
            large: () => this.handleLarge(),
            noWaves: () => this.handleNoWaves(),
        };
    }
    /**
     * @return {?}
     */
    initMaterialize() {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'btn', true);
    }
    /**
     * @return {?}
     */
    handleDisabled() {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'disabled', this.disabled);
    }
    /**
     * @return {?}
     */
    handleFlat() {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'btn', !this.flat);
        this.renderer.setElementClass(this.elementRef.nativeElement, 'btn-flat', this.flat);
    }
    /**
     * @return {?}
     */
    handleFloat() {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'btn-floating', this.float);
    }
    /**
     * @return {?}
     */
    handleLarge() {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'btn-large', this.large);
    }
    /**
     * @return {?}
     */
    handleNoWaves() {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'waves-effect', !this.noWaves);
        if (!this.flat) {
            this.renderer.setElementClass(this.elementRef.nativeElement, 'waves-light', !this.noWaves);
        }
    }
}
MzButtonDirective.ɵfac = function MzButtonDirective_Factory(t) { return new (t || MzButtonDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
MzButtonDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzButtonDirective, selectors: [["a", "mz-button", ""], ["a", "mzButton", ""], ["button", "mz-button", ""], ["button", "mzButton", ""]], inputs: { disabled: "disabled", flat: "flat", float: "float", large: "large", noWaves: "noWaves" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/** @nocollapse */
MzButtonDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];
MzButtonDirective.propDecorators = {
    "disabled": [{ type: Input },],
    "flat": [{ type: Input },],
    "float": [{ type: Input },],
    "large": [{ type: Input },],
    "noWaves": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzButtonDirective, [{
        type: Directive,
        args: [{
                selector: `
    a[mz-button],
    a[mzButton],
    button[mz-button],
    button[mzButton]`
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: Renderer }]; }, { disabled: [{
            type: Input
        }], flat: [{
            type: Input
        }], float: [{
            type: Input
        }], large: [{
            type: Input
        }], noWaves: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzButtonModule {
}
MzButtonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzButtonModule });
MzButtonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzButtonModule_Factory(t) { return new (t || MzButtonModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzButtonModule, { declarations: [MzButtonDirective], exports: [MzButtonDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzButtonModule, [{
        type: NgModule,
        args: [{
                declarations: [MzButtonDirective],
                exports: [MzButtonDirective]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzHalfwayFabDirective {
}
MzHalfwayFabDirective.ɵfac = function MzHalfwayFabDirective_Factory(t) { return new (t || MzHalfwayFabDirective)(); };
MzHalfwayFabDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzHalfwayFabDirective, selectors: [["a", "mz-halfway-fab", ""], ["a", "mzHalfwayFab", ""], ["button", "mz-halfway-fab", ""], ["button", "mzHalfwayFab", ""]], hostVars: 2, hostBindings: function MzHalfwayFabDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("halfway-fab", true);
    } } });
/** @nocollapse */
MzHalfwayFabDirective.propDecorators = {
    "true": [{ type: HostBinding, args: ['class.halfway-fab',] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzHalfwayFabDirective, [{
        type: Directive,
        args: [{
                selector: `
    a[mz-halfway-fab],
    a[mzHalfwayFab],
    button[mz-halfway-fab],
    button[mzHalfwayFab]`
            }]
    }], null, { true: [{
            type: HostBinding,
            args: ['class.halfway-fab']
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzHalfwayFabModule {
}
MzHalfwayFabModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzHalfwayFabModule });
MzHalfwayFabModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzHalfwayFabModule_Factory(t) { return new (t || MzHalfwayFabModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzHalfwayFabModule, { declarations: function () { return [MzHalfwayFabDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [MzHalfwayFabDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzHalfwayFabModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [
                    MzHalfwayFabDirective,
                ],
                exports: [
                    MzHalfwayFabDirective,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCardComponent {
    /**
     * @param {?} changeDetectorRef
     */
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.hasCardAction = true;
        this.hasCardImage = true;
        this.hasCardImageTitle = true;
        this.hasCardTitle = true;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.hasCardTitle = this.hasTitleTagAndNotEmpty();
        this.hasCardAction = this.hasActionTagAndNotEmpty();
        this.hasCardImage = this.hasImageTagAndNotEmpty();
        this.hasCardImageTitle = this.hasImageTitleTagAndNotEmpty();
        this.changeDetectorRef.detectChanges();
    }
    /**
     * @return {?}
     */
    hasActionTagAndNotEmpty() {
        const /** @type {?} */ cardActionElement = this.cardAction.nativeElement.querySelector('mz-card-action');
        return this.isElementDisplayed(cardActionElement);
    }
    /**
     * @return {?}
     */
    hasImageTagAndNotEmpty() {
        const /** @type {?} */ cardImagelement = this.cardImage.nativeElement.querySelector('mz-card-image');
        return this.isElementDisplayed(cardImagelement);
    }
    /**
     * @return {?}
     */
    hasImageTitleTagAndNotEmpty() {
        const /** @type {?} */ cardImageTitleElement = this.cardImage.nativeElement.querySelector('mz-card-image-title');
        return this.isElementDisplayed(cardImageTitleElement);
    }
    /**
     * @return {?}
     */
    hasTitleTagAndNotEmpty() {
        const /** @type {?} */ cardTitleElement = this.cardTitle ? this.cardTitle.nativeElement.querySelector('mz-card-title') : null;
        return this.isElementDisplayed(cardTitleElement);
    }
    /**
     * @param {?} element
     * @return {?}
     */
    isElementDisplayed(element) {
        return element && element.innerHTML.trim() !== '';
    }
}
MzCardComponent.ɵfac = function MzCardComponent_Factory(t) { return new (t || MzCardComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
MzCardComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzCardComponent, selectors: [["mz-card"]], viewQuery: function MzCardComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
        ɵngcc0.ɵɵviewQuery(_c1, true);
        ɵngcc0.ɵɵviewQuery(_c2, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cardAction = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cardImage = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cardTitle = _t.first);
    } }, hostVars: 6, hostBindings: function MzCardComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("card", true)("horizontal", ctx.horizontal)("hoverable", ctx.hoverable);
    } }, inputs: { horizontal: "horizontal", hoverable: "hoverable" }, ngContentSelectors: _c4, decls: 6, vars: 5, consts: [["class", "card-image", 4, "ngIf"], [1, "card-content"], ["class", "card-title", 4, "ngIf"], ["class", "card-action", 4, "ngIf"], [1, "card-image"], ["cardImage", ""], [1, "card-title"], ["cardTitle", ""], [1, "card-action"], ["cardAction", ""]], template: function MzCardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c3);
        ɵngcc0.ɵɵtemplate(0, MzCardComponent_div_0_Template, 4, 1, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div");
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵtemplate(3, MzCardComponent_div_3_Template, 3, 0, "div", 2);
        ɵngcc0.ɵɵprojection(4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, MzCardComponent_div_5_Template, 3, 0, "div", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasCardImage);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("card-stacked", ctx.horizontal);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasCardTitle);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasCardAction);
    } }, directives: [ɵngcc1.NgIf], styles: ["[_nghost-%COMP%]{display:block}"] });
/** @nocollapse */
MzCardComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
];
MzCardComponent.propDecorators = {
    "true": [{ type: HostBinding, args: ['class.card',] },],
    "horizontal": [{ type: HostBinding, args: ['class.horizontal',] }, { type: Input },],
    "hoverable": [{ type: HostBinding, args: ['class.hoverable',] }, { type: Input },],
    "cardAction": [{ type: ViewChild, args: ['cardAction',] },],
    "cardImage": [{ type: ViewChild, args: ['cardImage',] },],
    "cardTitle": [{ type: ViewChild, args: ['cardTitle',] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzCardComponent, [{
        type: Component,
        args: [{
                selector: 'mz-card',
                template: `<div #cardImage class="card-image" *ngIf="hasCardImage">
  <ng-content select="mz-card-image"></ng-content>
  <div class="card-title" *ngIf="hasCardImageTitle">
    <ng-content select="mz-card-image-title"></ng-content>
  </div>
</div>

<div [class.card-stacked]="horizontal">
  <div class="card-content">
    <div #cardTitle class="card-title" *ngIf="hasCardTitle">
      <ng-content select="mz-card-title"></ng-content>
    </div>

    <ng-content select="mz-card-content"></ng-content>
  </div>

  <div #cardAction class="card-action" *ngIf="hasCardAction">
    <ng-content select="mz-card-action"></ng-content>
  </div>
</div>`,
                styles: [`:host{display:block}`]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { true: [{
            type: HostBinding,
            args: ['class.card']
        }], horizontal: [{
            type: HostBinding,
            args: ['class.horizontal']
        }, {
            type: Input
        }], hoverable: [{
            type: HostBinding,
            args: ['class.hoverable']
        }, {
            type: Input
        }], cardAction: [{
            type: ViewChild,
            args: ['cardAction']
        }], cardImage: [{
            type: ViewChild,
            args: ['cardImage']
        }], cardTitle: [{
            type: ViewChild,
            args: ['cardTitle']
        }] }); })();
class MzCardImageDirective {
}
MzCardImageDirective.ɵfac = function MzCardImageDirective_Factory(t) { return new (t || MzCardImageDirective)(); };
MzCardImageDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzCardImageDirective, selectors: [["mz-card-image"]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzCardImageDirective, [{
        type: Directive,
        args: [{ selector: 'mz-card-image' }]
    }], null, null); })();
class MzCardImageTitleDirective {
}
MzCardImageTitleDirective.ɵfac = function MzCardImageTitleDirective_Factory(t) { return new (t || MzCardImageTitleDirective)(); };
MzCardImageTitleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzCardImageTitleDirective, selectors: [["mz-card-image-title"]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzCardImageTitleDirective, [{
        type: Directive,
        args: [{ selector: 'mz-card-image-title' }]
    }], null, null); })();
class MzCardTitleDirective {
}
MzCardTitleDirective.ɵfac = function MzCardTitleDirective_Factory(t) { return new (t || MzCardTitleDirective)(); };
MzCardTitleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzCardTitleDirective, selectors: [["mz-card-title"]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzCardTitleDirective, [{
        type: Directive,
        args: [{ selector: 'mz-card-title' }]
    }], null, null); })();
class MzCardContentDirective {
}
MzCardContentDirective.ɵfac = function MzCardContentDirective_Factory(t) { return new (t || MzCardContentDirective)(); };
MzCardContentDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzCardContentDirective, selectors: [["mz-card-content"]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzCardContentDirective, [{
        type: Directive,
        args: [{ selector: 'mz-card-content' }]
    }], null, null); })();
class MzCardActionDirective {
}
MzCardActionDirective.ɵfac = function MzCardActionDirective_Factory(t) { return new (t || MzCardActionDirective)(); };
MzCardActionDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzCardActionDirective, selectors: [["mz-card-action"]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzCardActionDirective, [{
        type: Directive,
        args: [{ selector: 'mz-card-action' }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCardModule {
}
MzCardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzCardModule });
MzCardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzCardModule_Factory(t) { return new (t || MzCardModule)(); }, imports: [[
            CommonModule,
            MzHalfwayFabModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzCardModule, { declarations: function () { return [MzCardActionDirective, MzCardComponent, MzCardContentDirective, MzCardImageDirective, MzCardImageTitleDirective, MzCardTitleDirective]; }, imports: function () { return [CommonModule, MzHalfwayFabModule]; }, exports: function () { return [MzCardActionDirective, MzCardComponent, MzCardContentDirective, MzCardImageDirective, MzCardImageTitleDirective, MzCardTitleDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzCardModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MzHalfwayFabModule,
                ],
                declarations: [
                    MzCardActionDirective,
                    MzCardComponent,
                    MzCardContentDirective,
                    MzCardImageDirective,
                    MzCardImageTitleDirective,
                    MzCardTitleDirective,
                ],
                exports: [
                    MzCardActionDirective,
                    MzCardComponent,
                    MzCardContentDirective,
                    MzCardImageDirective,
                    MzCardImageTitleDirective,
                    MzCardTitleDirective,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCheckboxContainerComponent {
}
MzCheckboxContainerComponent.ɵfac = function MzCheckboxContainerComponent_Factory(t) { return new (t || MzCheckboxContainerComponent)(); };
MzCheckboxContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzCheckboxContainerComponent, selectors: [["mz-checkbox-container"]], ngContentSelectors: _c5, decls: 2, vars: 0, consts: [[1, "checkbox-field"]], template: function MzCheckboxContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "p", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } }, styles: [""] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzCheckboxContainerComponent, [{
        type: Component,
        args: [{
                selector: 'mz-checkbox-container',
                template: `<p class="checkbox-field">
  <ng-content></ng-content>
</p>`,
                styles: [``]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCheckboxDirective extends HandlePropChanges {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        super();
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initHandlers();
        this.initElements();
        this.handleProperties();
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            filledIn: () => this.handleFilledIn(),
            label: () => this.handleLabel(),
        };
    }
    /**
     * @return {?}
     */
    initElements() {
        this.checkboxElement = $(this.elementRef.nativeElement);
        this.checkboxContainerElement = $(this.elementRef.nativeElement).parent('.checkbox-field');
        this.labelElement = this.createLabelElement();
    }
    /**
     * @return {?}
     */
    createLabelElement() {
        const /** @type {?} */ labelElement = document.createElement('label');
        labelElement.setAttribute('for', this.id);
        this.renderer.invokeElementMethod(this.checkboxElement, 'after', [labelElement]);
        return $(labelElement);
    }
    /**
     * @return {?}
     */
    handleProperties() {
        if (this.checkboxContainerElement.length === 0) {
            console.error('Input with mz-checkbox directive must be placed inside a [mz-checkbox-container] tag', this.checkboxElement);
            return;
        }
        super.executePropHandlers();
    }
    /**
     * @return {?}
     */
    handleLabel() {
        this.renderer.invokeElementMethod(this.labelElement, 'text', [this.label]);
    }
    /**
     * @return {?}
     */
    handleFilledIn() {
        this.renderer.setElementClass(this.checkboxElement[0], 'filled-in', this.filledIn);
    }
}
MzCheckboxDirective.ɵfac = function MzCheckboxDirective_Factory(t) { return new (t || MzCheckboxDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
MzCheckboxDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzCheckboxDirective, selectors: [["input", "mzCheckbox", ""], ["input", "mz-checkbox", ""]], hostVars: 1, hostBindings: function MzCheckboxDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("id", ctx.id);
    } }, inputs: { id: "id", filledIn: "filledIn", label: "label" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/** @nocollapse */
MzCheckboxDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];
MzCheckboxDirective.propDecorators = {
    "id": [{ type: HostBinding }, { type: Input },],
    "filledIn": [{ type: Input },],
    "label": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzCheckboxDirective, [{
        type: Directive,
        args: [{
                selector: 'input[mzCheckbox], input[mz-checkbox]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: Renderer }]; }, { id: [{
            type: HostBinding
        }, {
            type: Input
        }], filledIn: [{
            type: Input
        }], label: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCheckboxModule {
}
MzCheckboxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzCheckboxModule });
MzCheckboxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzCheckboxModule_Factory(t) { return new (t || MzCheckboxModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzCheckboxModule, { declarations: [MzCheckboxDirective, MzCheckboxContainerComponent], exports: [MzCheckboxDirective, MzCheckboxContainerComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzCheckboxModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    MzCheckboxDirective,
                    MzCheckboxContainerComponent,
                ],
                exports: [
                    MzCheckboxDirective,
                    MzCheckboxContainerComponent,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzChipInputComponent {
    /**
     * @param {?} elementRef
     * @param {?} zone
     */
    constructor(elementRef, zone) {
        this.elementRef = elementRef;
        this.zone = zone;
        this.add = new EventEmitter();
        this.delete = new EventEmitter();
        this.select = new EventEmitter();
        this.onChangeCallback = (data) => { };
    }
    /**
     * @return {?}
     */
    get value() {
        return /** @type {?} */ (this.chipInputElement.material_chip('data'));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initElements();
        this.initMaterializeChip();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.chipInputElement.off('chip.add');
        this.chipInputElement.off('chip.delete');
        this.chipInputElement.off('chip.select');
    }
    /**
     * @return {?}
     */
    initElements() {
        this.chipInputElement = $(this.elementRef.nativeElement);
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    initMaterializeChip(value) {
        // fix issue autocomplete is not a function
        // https://github.com/Dogfalo/materialize/issues/4401
        this.zone.runOutsideAngular(() => {
            setTimeout(() => {
                this.chipInputElement.material_chip({
                    autocompleteOptions: this.autocompleteOptions,
                    data: value || this.value,
                    placeholder: this.placeholder,
                    secondaryPlaceholder: this.secondaryPlaceholder,
                });
            });
        });
        this.chipInputElement.on('chip.add', (event, chip) => {
            this.onChangeCallback(this.value);
            this.add.emit(chip);
        });
        this.chipInputElement.on('chip.delete', (event, chip) => {
            this.onChangeCallback(this.value);
            this.delete.emit(chip);
        });
        this.chipInputElement.on('chip.select', (event, chip) => {
            this.select.emit(chip);
        });
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) { }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) { }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value && value !== this.value) {
            this.initMaterializeChip(value);
        }
    }
}
MzChipInputComponent.ɵfac = function MzChipInputComponent_Factory(t) { return new (t || MzChipInputComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
MzChipInputComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzChipInputComponent, selectors: [["mz-chip-input"]], inputs: { autocompleteOptions: "autocompleteOptions", placeholder: "placeholder", secondaryPlaceholder: "secondaryPlaceholder" }, outputs: { add: "add", delete: "delete", select: "select" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => MzChipInputComponent),
                multi: true
            },
        ])], decls: 0, vars: 0, template: function MzChipInputComponent_Template(rf, ctx) { }, styles: ["[_nghost-%COMP%]{display:block}"] });
/** @nocollapse */
MzChipInputComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: NgZone, },
];
MzChipInputComponent.propDecorators = {
    "autocompleteOptions": [{ type: Input },],
    "placeholder": [{ type: Input },],
    "secondaryPlaceholder": [{ type: Input },],
    "add": [{ type: Output },],
    "delete": [{ type: Output },],
    "select": [{ type: Output },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzChipInputComponent, [{
        type: Component,
        args: [{
                selector: 'mz-chip-input',
                template: ``,
                styles: [`:host{display:block}`],
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => MzChipInputComponent),
                        multi: true
                    },
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { add: [{
            type: Output
        }], delete: [{
            type: Output
        }], select: [{
            type: Output
        }], autocompleteOptions: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], secondaryPlaceholder: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzChipComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.chipClass = true;
        this.close = false;
        this.delete = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get chipElement() {
        return /** @type {?} */ (this.elementRef.nativeElement);
    }
    /**
     * @return {?}
     */
    onDelete() {
        let /** @type {?} */ value = '';
        for (let /** @type {?} */ i = 0; i < this.chipElement.childNodes.length; i++) {
            if (this.chipElement.childNodes.item(i).nodeType === Node.TEXT_NODE) {
                value += this.chipElement.childNodes.item(i).nodeValue;
            }
        }
        this.delete.emit(value.trim());
    }
}
MzChipComponent.ɵfac = function MzChipComponent_Factory(t) { return new (t || MzChipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
MzChipComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzChipComponent, selectors: [["mz-chip"]], hostVars: 2, hostBindings: function MzChipComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("chip", ctx.chipClass);
    } }, inputs: { close: "close" }, outputs: { delete: "delete" }, ngContentSelectors: _c5, decls: 2, vars: 1, consts: [["class", "close material-icons", 3, "click", 4, "ngIf"], [1, "close", "material-icons", 3, "click"]], template: function MzChipComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵtemplate(1, MzChipComponent_i_1_Template, 2, 0, "i", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.close);
    } }, directives: [ɵngcc1.NgIf], styles: [""] });
/** @nocollapse */
MzChipComponent.ctorParameters = () => [
    { type: ElementRef, },
];
MzChipComponent.propDecorators = {
    "chipClass": [{ type: HostBinding, args: ['class.chip',] },],
    "close": [{ type: Input },],
    "delete": [{ type: Output },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzChipComponent, [{
        type: Component,
        args: [{
                selector: 'mz-chip',
                template: `<ng-content></ng-content>
<i class="close material-icons" (click)="onDelete()" *ngIf="close">close</i>`,
                styles: [``]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { chipClass: [{
            type: HostBinding,
            args: ['class.chip']
        }], close: [{
            type: Input
        }], delete: [{
            type: Output
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzChipModule {
}
MzChipModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzChipModule });
MzChipModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzChipModule_Factory(t) { return new (t || MzChipModule)(); }, imports: [[
            CommonModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzChipModule, { declarations: function () { return [MzChipComponent, MzChipInputComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [MzChipComponent, MzChipInputComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzChipModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                ],
                declarations: [
                    MzChipComponent,
                    MzChipInputComponent,
                ],
                exports: [
                    MzChipComponent,
                    MzChipInputComponent,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCollapsibleItemComponent extends MzRemoveComponentHost {
}
MzCollapsibleItemComponent.ɵfac = function MzCollapsibleItemComponent_Factory(t) { return ɵMzCollapsibleItemComponent_BaseFactory(t || MzCollapsibleItemComponent); };
MzCollapsibleItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzCollapsibleItemComponent, selectors: [["mz-collapsible-item"]], inputs: { active: "active" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c7, decls: 5, vars: 2, consts: [[1, "collapsible-header"], [1, "collapsible-body"]], template: function MzCollapsibleItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c6);
        ɵngcc0.ɵɵelementStart(0, "li");
        ɵngcc0.ɵɵelementStart(1, "div", 0);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 1);
        ɵngcc0.ɵɵprojection(4, 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("active", ctx.active);
    } }, styles: [""] });
/** @nocollapse */
MzCollapsibleItemComponent.propDecorators = {
    "active": [{ type: Input },],
};
const ɵMzCollapsibleItemComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MzCollapsibleItemComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzCollapsibleItemComponent, [{
        type: Component,
        args: [{
                selector: 'mz-collapsible-item',
                template: `<li>
  <div class="collapsible-header"
    [class.active]="active"
  >
    <ng-content select="mz-collapsible-item-header"></ng-content>
  </div>
  <div class="collapsible-body">
    <ng-content select="mz-collapsible-item-body"></ng-content>
  </div>
</li>`,
                styles: [``]
            }]
    }], null, { active: [{
            type: Input
        }] }); })();
class MzCollapsibleItemBodyDirective {
}
MzCollapsibleItemBodyDirective.ɵfac = function MzCollapsibleItemBodyDirective_Factory(t) { return new (t || MzCollapsibleItemBodyDirective)(); };
MzCollapsibleItemBodyDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzCollapsibleItemBodyDirective, selectors: [["mz-collapsible-item-body"]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzCollapsibleItemBodyDirective, [{
        type: Directive,
        args: [{ selector: 'mz-collapsible-item-body' }]
    }], null, null); })();
class MzCollapsibleItemHeaderDirective {
}
MzCollapsibleItemHeaderDirective.ɵfac = function MzCollapsibleItemHeaderDirective_Factory(t) { return new (t || MzCollapsibleItemHeaderDirective)(); };
MzCollapsibleItemHeaderDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzCollapsibleItemHeaderDirective, selectors: [["mz-collapsible-item-header"]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzCollapsibleItemHeaderDirective, [{
        type: Directive,
        args: [{ selector: 'mz-collapsible-item-header' }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCollapsibleComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.handleDataCollapsible();
        this.initCollapsible();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        $(this.collapsible.nativeElement).collapsible('destroy');
    }
    /**
     * @param {?} collapsibleItemIndex
     * @return {?}
     */
    close(collapsibleItemIndex) {
        $(this.collapsible.nativeElement).collapsible('close', collapsibleItemIndex);
    }
    /**
     * @return {?}
     */
    initCollapsible() {
        const /** @type {?} */ options = {
            accordion: false,
            onClose: this.onClose,
            onOpen: this.onOpen,
        };
        $(this.collapsible.nativeElement).collapsible(options);
    }
    /**
     * @return {?}
     */
    handleDataCollapsible() {
        if (this.mode) {
            this.renderer.setElementAttribute(this.collapsible.nativeElement, 'data-collapsible', this.mode);
        }
    }
    /**
     * @param {?} collapsibleItemIndex
     * @return {?}
     */
    open(collapsibleItemIndex) {
        $(this.collapsible.nativeElement).collapsible('open', collapsibleItemIndex);
    }
}
MzCollapsibleComponent.ɵfac = function MzCollapsibleComponent_Factory(t) { return new (t || MzCollapsibleComponent)(ɵngcc0.ɵɵdirectiveInject(Renderer)); };
MzCollapsibleComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzCollapsibleComponent, selectors: [["mz-collapsible"]], contentQueries: function MzCollapsibleComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, MzCollapsibleItemComponent, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);
    } }, viewQuery: function MzCollapsibleComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c8, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.collapsible = _t.first);
    } }, inputs: { mode: "mode", onClose: "onClose", onOpen: "onOpen", popout: "popout" }, ngContentSelectors: _c5, decls: 3, vars: 3, consts: [[1, "collapsible", 3, "hidden"], ["collapsible", ""]], template: function MzCollapsibleComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "ul", 0, 1);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("popout", ctx.popout);
        ɵngcc0.ɵɵproperty("hidden", ctx.items.length === 0);
    } }, styles: [".collapsible-header{clear:both}  .collapsible-body{clear:both}"] });
/** @nocollapse */
MzCollapsibleComponent.ctorParameters = () => [
    { type: Renderer, },
];
MzCollapsibleComponent.propDecorators = {
    "mode": [{ type: Input },],
    "onClose": [{ type: Input },],
    "onOpen": [{ type: Input },],
    "popout": [{ type: Input },],
    "collapsible": [{ type: ViewChild, args: ['collapsible',] },],
    "items": [{ type: ContentChildren, args: [MzCollapsibleItemComponent,] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzCollapsibleComponent, [{
        type: Component,
        args: [{
                selector: 'mz-collapsible',
                template: `<ul #collapsible
  class="collapsible"
  [class.popout]="popout"
  [hidden]="items.length === 0"
>
  <ng-content></ng-content>
</ul>`,
                styles: [`/deep/ .collapsible-header{clear:both}/deep/ .collapsible-body{clear:both}`]
            }]
    }], function () { return [{ type: Renderer }]; }, { mode: [{
            type: Input
        }], onClose: [{
            type: Input
        }], onOpen: [{
            type: Input
        }], popout: [{
            type: Input
        }], collapsible: [{
            type: ViewChild,
            args: ['collapsible']
        }], items: [{
            type: ContentChildren,
            args: [MzCollapsibleItemComponent]
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCollapsibleModule {
}
MzCollapsibleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzCollapsibleModule });
MzCollapsibleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzCollapsibleModule_Factory(t) { return new (t || MzCollapsibleModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzCollapsibleModule, { declarations: [MzCollapsibleComponent, MzCollapsibleItemBodyDirective, MzCollapsibleItemComponent, MzCollapsibleItemHeaderDirective], exports: [MzCollapsibleComponent, MzCollapsibleItemBodyDirective, MzCollapsibleItemComponent, MzCollapsibleItemHeaderDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzCollapsibleModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    MzCollapsibleComponent,
                    MzCollapsibleItemBodyDirective,
                    MzCollapsibleItemComponent,
                    MzCollapsibleItemHeaderDirective,
                ],
                exports: [
                    MzCollapsibleComponent,
                    MzCollapsibleItemBodyDirective,
                    MzCollapsibleItemComponent,
                    MzCollapsibleItemHeaderDirective,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzAvatarDirective {
}
MzAvatarDirective.ɵfac = function MzAvatarDirective_Factory(t) { return new (t || MzAvatarDirective)(); };
MzAvatarDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzAvatarDirective, selectors: [["", "mzAvatar", ""], ["", "mz-avatar", ""]], hostVars: 2, hostBindings: function MzAvatarDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("circle", true);
    } } });
/** @nocollapse */
MzAvatarDirective.propDecorators = {
    "true": [{ type: HostBinding, args: ['class.circle',] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzAvatarDirective, [{
        type: Directive,
        args: [{
                selector: '[mzAvatar], [mz-avatar]'
            }]
    }], null, { true: [{
            type: HostBinding,
            args: ['class.circle']
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCollectionHeaderComponent {
}
MzCollectionHeaderComponent.ɵfac = function MzCollectionHeaderComponent_Factory(t) { return new (t || MzCollectionHeaderComponent)(); };
MzCollectionHeaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzCollectionHeaderComponent, selectors: [["mz-collection-header"]], ngContentSelectors: _c5, decls: 2, vars: 0, consts: [[1, "collection-header"]], template: function MzCollectionHeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } }, styles: [""] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzCollectionHeaderComponent, [{
        type: Component,
        args: [{
                selector: 'mz-collection-header',
                template: `<div class="collection-header">
  <ng-content></ng-content>
</div>`,
                styles: [``]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCollectionItemComponent {
}
MzCollectionItemComponent.ɵfac = function MzCollectionItemComponent_Factory(t) { return new (t || MzCollectionItemComponent)(); };
MzCollectionItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzCollectionItemComponent, selectors: [["mz-collection-item"]], hostVars: 6, hostBindings: function MzCollectionItemComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("collection-item", true)("avatar", ctx.avatar)("dismissable", ctx.dismissable);
    } }, inputs: { avatar: "avatar", dismissable: "dismissable" }, ngContentSelectors: _c5, decls: 1, vars: 0, template: function MzCollectionItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: ["[_nghost-%COMP%]{display:block}"] });
/** @nocollapse */
MzCollectionItemComponent.propDecorators = {
    "true": [{ type: HostBinding, args: ['class.collection-item',] },],
    "avatar": [{ type: HostBinding, args: ['class.avatar',] }, { type: Input },],
    "dismissable": [{ type: HostBinding, args: ['class.dismissable',] }, { type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzCollectionItemComponent, [{
        type: Component,
        args: [{
                selector: 'mz-collection-item',
                template: `<ng-content></ng-content>`,
                styles: [`:host{display:block}`]
            }]
    }], null, { true: [{
            type: HostBinding,
            args: ['class.collection-item']
        }], avatar: [{
            type: HostBinding,
            args: ['class.avatar']
        }, {
            type: Input
        }], dismissable: [{
            type: HostBinding,
            args: ['class.dismissable']
        }, {
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCollectionLinkDirective {
}
MzCollectionLinkDirective.ɵfac = function MzCollectionLinkDirective_Factory(t) { return new (t || MzCollectionLinkDirective)(); };
MzCollectionLinkDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzCollectionLinkDirective, selectors: [["", "mzCollectionLink", ""], ["", "mz-collection-link", ""]], hostVars: 4, hostBindings: function MzCollectionLinkDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("active", ctx.active)("collection-item", true);
    } }, inputs: { active: "active" } });
/** @nocollapse */
MzCollectionLinkDirective.propDecorators = {
    "active": [{ type: HostBinding, args: ['class.active',] }, { type: Input },],
    "true": [{ type: HostBinding, args: ['class.collection-item',] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzCollectionLinkDirective, [{
        type: Directive,
        args: [{
                selector: '[mzCollectionLink], [mz-collection-link]'
            }]
    }], null, { active: [{
            type: HostBinding,
            args: ['class.active']
        }, {
            type: Input
        }], true: [{
            type: HostBinding,
            args: ['class.collection-item']
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCollectionComponent {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initElements();
        this.initCollectionHeader();
    }
    /**
     * @return {?}
     */
    initElements() {
        this.collectionElement = $(this.elementRef.nativeElement).find('.collection');
        this.collectionHeaderElement = $(this.elementRef.nativeElement).find('.collection-header');
    }
    /**
     * @return {?}
     */
    initCollectionHeader() {
        if (this.collectionHeaderElement.length > 0) {
            this.renderer.addClass(this.collectionElement[0], 'with-header');
        }
    }
}
MzCollectionComponent.ɵfac = function MzCollectionComponent_Factory(t) { return new (t || MzCollectionComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
MzCollectionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzCollectionComponent, selectors: [["mz-collection"]], ngContentSelectors: _c5, decls: 2, vars: 0, consts: [[1, "collection"]], template: function MzCollectionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } }, styles: [""] });
/** @nocollapse */
MzCollectionComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzCollectionComponent, [{
        type: Component,
        args: [{
                selector: 'mz-collection',
                template: `<div class="collection">
  <ng-content></ng-content>
</div>`,
                styles: [``]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSecondaryContentDirective {
}
MzSecondaryContentDirective.ɵfac = function MzSecondaryContentDirective_Factory(t) { return new (t || MzSecondaryContentDirective)(); };
MzSecondaryContentDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzSecondaryContentDirective, selectors: [["", "mzSecondaryContent", ""], ["", "mz-secondary-content", ""]], hostVars: 2, hostBindings: function MzSecondaryContentDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("secondary-content", true);
    } } });
/** @nocollapse */
MzSecondaryContentDirective.propDecorators = {
    "true": [{ type: HostBinding, args: ['class.secondary-content',] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzSecondaryContentDirective, [{
        type: Directive,
        args: [{
                selector: '[mzSecondaryContent], [mz-secondary-content]'
            }]
    }], null, { true: [{
            type: HostBinding,
            args: ['class.secondary-content']
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzCollectionModule {
}
MzCollectionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzCollectionModule });
MzCollectionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzCollectionModule_Factory(t) { return new (t || MzCollectionModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzCollectionModule, { declarations: [MzAvatarDirective, MzCollectionComponent, MzCollectionItemComponent, MzCollectionLinkDirective, MzCollectionHeaderComponent, MzSecondaryContentDirective], exports: [MzAvatarDirective, MzCollectionComponent, MzCollectionItemComponent, MzCollectionLinkDirective, MzCollectionHeaderComponent, MzSecondaryContentDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzCollectionModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    MzAvatarDirective,
                    MzCollectionComponent,
                    MzCollectionItemComponent,
                    MzCollectionLinkDirective,
                    MzCollectionHeaderComponent,
                    MzSecondaryContentDirective,
                ],
                exports: [
                    MzAvatarDirective,
                    MzCollectionComponent,
                    MzCollectionItemComponent,
                    MzCollectionLinkDirective,
                    MzCollectionHeaderComponent,
                    MzSecondaryContentDirective,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzDatepickerContainerComponent {
}
MzDatepickerContainerComponent.ɵfac = function MzDatepickerContainerComponent_Factory(t) { return new (t || MzDatepickerContainerComponent)(); };
MzDatepickerContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzDatepickerContainerComponent, selectors: [["mz-datepicker-container"]], inputs: { inline: "inline" }, ngContentSelectors: _c5, decls: 2, vars: 2, consts: [[1, "input-field"]], template: function MzDatepickerContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("inline", ctx.inline);
    } }, styles: [""] });
/** @nocollapse */
MzDatepickerContainerComponent.propDecorators = {
    "inline": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzDatepickerContainerComponent, [{
        type: Component,
        args: [{
                selector: 'mz-datepicker-container',
                template: `<div
  class="input-field"
  [class.inline]="inline"
>
  <ng-content></ng-content>
</div>`,
                styles: [``]
            }]
    }], null, { inline: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzDatepickerDirective extends HandlePropChanges {
    /**
     * @param {?} ngControl
     * @param {?} changeDetectorRef
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(ngControl, changeDetectorRef, elementRef, renderer) {
        super();
        this.ngControl = ngControl;
        this.changeDetectorRef = changeDetectorRef;
        this.elementRef = elementRef;
        this.renderer = renderer;
        // materialize uses pickadate.js to create the datepicker
        // complete list of options is available at the following address
        // http://amsul.ca/pickadate.js/date/#options
        this.options = {};
        this.isInitRound = true;
        this.stopChangePropagation = false;
    }
    /**
     * @return {?}
     */
    get format() {
        return this.options.format || this.options.formatSubmit || null;
    }
    /**
     * @return {?}
     */
    get formatSubmit() {
        return this.options.formatSubmit || this.options.format || null;
    }
    /**
     * @return {?}
     */
    get ngControlValue() {
        return this.ngControl.value === '' ? null : this.ngControl.value;
    }
    /**
     * @return {?}
     */
    get picker() {
        return this.inputElement.pickadate('picker');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initHandlers();
        this.initElements();
        this.initDatepicker();
        this.initInputSubscription();
        this.handleProperties();
        this.isInitRound = false;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.inputValueSubscription) {
            this.inputValueSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            label: () => this.handleLabel(),
            options: () => this.handleOptions(),
            placeholder: () => this.handlePlaceholder(),
        };
    }
    /**
     * @return {?}
     */
    initElements() {
        this.inputContainerElement = $(this.elementRef.nativeElement).parent('.input-field');
        this.inputElement = $(this.elementRef.nativeElement);
        this.labelElement = this.createLabelElement();
    }
    /**
     * @return {?}
     */
    initDatepicker() {
        // set default format/formatSubmit options
        if (this.format) {
            this.options.format = this.format;
        }
        if (this.formatSubmit) {
            this.options.formatSubmit = this.formatSubmit;
        }
        // extends onClose function to fix datepicker focus issue
        // https://github.com/Dogfalo/materialize/issues/2067#issuecomment-142107599
        const /** @type {?} */ onCloseFn = this.options && this.options.onClose || (() => { });
        this.options = Object.assign({}, this.options, {
            onClose: (event) => {
                onCloseFn(event);
                this.renderer.invokeElementMethod(document.activeElement, 'blur');
            },
        });
        this.renderer.invokeElementMethod(this.inputElement, 'pickadate', [this.options]);
        if (this.ngControl) {
            // set datepicker initial value according to ngControl
            this.picker.set('select', this.ngControlValue, { format: this.formatSubmit });
            // set ngControl value according to selected date in datepicker
            this.picker.on('set', () => {
                // handle stop propagation
                if (this.stopChangePropagation) {
                    this.stopChangePropagation = false;
                    return;
                }
                else {
                    this.stopChangePropagation = true;
                }
                // apply options.formatSubmit to ngControl value
                const /** @type {?} */ submitValue = this.formatSubmit
                    ? this.picker.get('select', this.formatSubmit)
                    : this.picker.get('value');
                this.ngControl.control.setValue(submitValue);
                // apply options.format to input text
                const /** @type {?} */ formatValue = this.format
                    ? this.picker.get('select', this.format)
                    : this.picker.get('value');
                this.inputElement.val(formatValue);
                // set label active status
                this.setLabelActive();
                // mark for change detection
                // fix form validation with ChangeDetectionStrategy.OnPush
                this.changeDetectorRef.markForCheck();
            });
        }
    }
    /**
     * @return {?}
     */
    initInputSubscription() {
        if (this.ngControl) {
            this.inputValueSubscription = this.ngControl.valueChanges.subscribe(() => {
                // handle stop propagation
                if (this.stopChangePropagation) {
                    this.stopChangePropagation = false;
                    return;
                }
                else {
                    this.stopChangePropagation = true;
                }
                // set selected date in datepicker according to ngControl value
                this.picker.set('select', this.ngControlValue, { format: this.formatSubmit });
                // set label active status
                this.setLabelActive();
            });
        }
    }
    /**
     * @return {?}
     */
    createLabelElement() {
        const /** @type {?} */ labelElement = document.createElement('label');
        labelElement.setAttribute('for', this.id);
        this.renderer.invokeElementMethod(this.inputElement, 'after', [labelElement]);
        return $(labelElement);
    }
    /**
     * @return {?}
     */
    handleProperties() {
        if (this.inputContainerElement.length === 0) {
            console.error('Input with mz-datepicker directive must be placed inside an [mz-datepicker-container] tag', this.inputElement);
            return;
        }
        super.executePropHandlers();
    }
    /**
     * @return {?}
     */
    handleLabel() {
        this.renderer.invokeElementMethod(this.labelElement, 'text', [this.label]);
    }
    /**
     * @return {?}
     */
    handleOptions() {
        if (!this.isInitRound) {
            this.picker.set(this.options);
        }
    }
    /**
     * @return {?}
     */
    handlePlaceholder() {
        const /** @type {?} */ placeholder = !!this.placeholder ? this.placeholder : null;
        this.renderer.setElementAttribute(this.inputElement[0], 'placeholder', placeholder);
        // fix issue in IE where having a placeholder on input make control dirty and trigger validation
        // on page load... note that it still trigger validation on focus and would need a better fix
        // issue : https://github.com/angular/angular/issues/15299
        // workaround : https://stackoverflow.com/a/44967245/5583283
        if (this.ngControl) {
            setTimeout(() => this.ngControl.control.markAsPristine());
        }
        this.setLabelActive();
    }
    /**
     * @return {?}
     */
    setLabelActive() {
        // need setTimeout otherwise it wont make label float in some circonstances (forcing validation for example)
        setTimeout(() => {
            const /** @type {?} */ inputValue = (/** @type {?} */ (this.inputElement[0])).value;
            const /** @type {?} */ isActive = !!this.placeholder || !!inputValue;
            this.renderer.setElementClass(this.labelElement[0], 'active', isActive);
        });
    }
}
MzDatepickerDirective.ɵfac = function MzDatepickerDirective_Factory(t) { return new (t || MzDatepickerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
MzDatepickerDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzDatepickerDirective, selectors: [["input", "mzDatepicker", ""], ["input", "mz-datepicker", ""]], hostVars: 2, hostBindings: function MzDatepickerDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("datepicker", true);
    } }, inputs: { options: "options", id: "id", placeholder: "placeholder", label: "label" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/** @nocollapse */
MzDatepickerDirective.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional },] },
    { type: ChangeDetectorRef, },
    { type: ElementRef, },
    { type: Renderer, },
];
MzDatepickerDirective.propDecorators = {
    "true": [{ type: HostBinding, args: ['class.datepicker',] },],
    "id": [{ type: Input },],
    "placeholder": [{ type: Input },],
    "label": [{ type: Input },],
    "options": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzDatepickerDirective, [{
        type: Directive,
        args: [{
                selector: 'input[mzDatepicker], input[mz-datepicker]'
            }]
    }], function () { return [{ type: ɵngcc2.NgControl, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: Renderer }]; }, { options: [{
            type: Input
        }], true: [{
            type: HostBinding,
            args: ['class.datepicker']
        }], id: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], label: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzDatepickerModule {
}
MzDatepickerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzDatepickerModule });
MzDatepickerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzDatepickerModule_Factory(t) { return new (t || MzDatepickerModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzDatepickerModule, { declarations: [MzDatepickerDirective, MzDatepickerContainerComponent], exports: [MzDatepickerDirective, MzDatepickerContainerComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzDatepickerModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    MzDatepickerDirective,
                    MzDatepickerContainerComponent,
                ],
                exports: [
                    MzDatepickerDirective,
                    MzDatepickerContainerComponent,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzDropdownDividerComponent {
}
MzDropdownDividerComponent.ɵfac = function MzDropdownDividerComponent_Factory(t) { return new (t || MzDropdownDividerComponent)(); };
MzDropdownDividerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzDropdownDividerComponent, selectors: [["mz-dropdown-divider"]], decls: 1, vars: 0, consts: [[1, "divider"]], template: function MzDropdownDividerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "li", 0);
    } }, styles: [""] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzDropdownDividerComponent, [{
        type: Component,
        args: [{
                selector: 'mz-dropdown-divider',
                template: `<li class="divider"></li>`,
                styles: [``]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzDropdownItemComponent {
}
MzDropdownItemComponent.ɵfac = function MzDropdownItemComponent_Factory(t) { return new (t || MzDropdownItemComponent)(); };
MzDropdownItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzDropdownItemComponent, selectors: [["mz-dropdown-item"]], ngContentSelectors: _c5, decls: 2, vars: 0, template: function MzDropdownItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "li");
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } }, styles: [""] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzDropdownItemComponent, [{
        type: Component,
        args: [{
                selector: 'mz-dropdown-item',
                template: `<li>
  <ng-content></ng-content>
</li>`,
                styles: [``]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzDropdownComponent extends HandlePropChanges {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        super();
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initHandlers();
        this.initDropdownButtonElement();
        this.handleProperties();
    }
    /**
     * @return {?}
     */
    close() {
        setTimeout(() => this.renderer.invokeElementMethod(this.dropdownButtonElement, 'dropdown', ['close']));
    }
    /**
     * @return {?}
     */
    initDropdownButtonElement() {
        this.dropdownButtonElement = $(`#${this.dropdownButtonId}`);
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            align: () => this.handleDropdown(),
            belowOrigin: () => this.handleDropdown(),
            constrainWidth: () => this.handleDropdown(),
            dropdownButtonId: () => this.handleDataActivates(),
            gutter: () => this.handleDropdown(),
            hover: () => this.handleDropdown(),
            id: () => this.handleDropdown(),
            inDuration: () => this.handleDropdown(),
            outDuration: () => this.handleDropdown(),
            stopPropagation: () => this.handleDropdown(),
        };
    }
    /**
     * @return {?}
     */
    handleDataActivates() {
        this.renderer.setElementAttribute(this.dropdownButtonElement[0], 'data-activates', this.id);
    }
    /**
     * @return {?}
     */
    handleDropdown() {
        this.validateProperties();
        const /** @type {?} */ options = {
            alignment: this.align,
            belowOrigin: this.belowOrigin,
            constrainWidth: this.constrainWidth,
            gutter: this.gutter,
            hover: this.hover,
            inDuration: this.inDuration,
            outDuration: this.outDuration,
            stopPropagation: this.stopPropagation,
        };
        // Initialize dropdown button for dropdown
        this.renderer.invokeElementMethod(this.dropdownButtonElement, 'dropdown', [options]);
    }
    /**
     * @return {?}
     */
    handleProperties() {
        this.handleDataActivates();
        this.handleDropdown();
    }
    /**
     * @return {?}
     */
    open() {
        setTimeout(() => this.renderer.invokeElementMethod(this.dropdownButtonElement, 'dropdown', ['open']));
    }
    /**
     * @return {?}
     */
    validateProperties() {
        if (!this.id) {
            throw new Error('Attribute [id] from mz-dropdown is required. ' + this.elementRef.nativeElement);
        }
        if (this.dropdownButtonElement.length === 0) {
            throw new Error('Attribute [dropdownButtonId] from mz-dropdown is required and should be an existing element. ' +
                this.elementRef.nativeElement);
        }
    }
}
MzDropdownComponent.ɵfac = function MzDropdownComponent_Factory(t) { return new (t || MzDropdownComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
MzDropdownComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzDropdownComponent, selectors: [["mz-dropdown"]], inputs: { align: "align", belowOrigin: "belowOrigin", constrainWidth: "constrainWidth", dropdownButtonId: "dropdownButtonId", gutter: "gutter", hover: "hover", id: "id", inDuration: "inDuration", outDuration: "outDuration", stopPropagation: "stopPropagation" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c5, decls: 2, vars: 1, consts: [[1, "dropdown-content"]], template: function MzDropdownComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "ul", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.id);
    } }, styles: [""] });
/** @nocollapse */
MzDropdownComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];
MzDropdownComponent.propDecorators = {
    "align": [{ type: Input },],
    "belowOrigin": [{ type: Input },],
    "constrainWidth": [{ type: Input },],
    "dropdownButtonId": [{ type: Input },],
    "gutter": [{ type: Input },],
    "hover": [{ type: Input },],
    "id": [{ type: Input },],
    "inDuration": [{ type: Input },],
    "outDuration": [{ type: Input },],
    "stopPropagation": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzDropdownComponent, [{
        type: Component,
        args: [{
                selector: 'mz-dropdown',
                template: `<ul
  class="dropdown-content"
  [attr.id]="id"
>
  <ng-content></ng-content>
</ul>`,
                styles: [``]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: Renderer }]; }, { align: [{
            type: Input
        }], belowOrigin: [{
            type: Input
        }], constrainWidth: [{
            type: Input
        }], dropdownButtonId: [{
            type: Input
        }], gutter: [{
            type: Input
        }], hover: [{
            type: Input
        }], id: [{
            type: Input
        }], inDuration: [{
            type: Input
        }], outDuration: [{
            type: Input
        }], stopPropagation: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzDropdownModule {
}
MzDropdownModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzDropdownModule });
MzDropdownModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzDropdownModule_Factory(t) { return new (t || MzDropdownModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzDropdownModule, { declarations: [MzDropdownComponent, MzDropdownDividerComponent, MzDropdownItemComponent], exports: [MzDropdownComponent, MzDropdownDividerComponent, MzDropdownItemComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzDropdownModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    MzDropdownComponent,
                    MzDropdownDividerComponent,
                    MzDropdownItemComponent,
                ],
                exports: [
                    MzDropdownComponent,
                    MzDropdownDividerComponent,
                    MzDropdownItemComponent,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzFeatureDiscoveryComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.targetClass = true;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.target = $(this.elementRef.nativeElement);
    }
    /**
     * @return {?}
     */
    close() {
        this.target.tapTarget('close');
    }
    /**
     * @return {?}
     */
    open() {
        this.target.tapTarget('open');
    }
}
MzFeatureDiscoveryComponent.ɵfac = function MzFeatureDiscoveryComponent_Factory(t) { return new (t || MzFeatureDiscoveryComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
MzFeatureDiscoveryComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzFeatureDiscoveryComponent, selectors: [["mz-feature-discovery"]], hostVars: 3, hostBindings: function MzFeatureDiscoveryComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("data-activates", ctx.targetId);
        ɵngcc0.ɵɵclassProp("tap-target", ctx.targetClass);
    } }, inputs: { targetId: "targetId" }, ngContentSelectors: _c5, decls: 2, vars: 0, consts: [[1, "tap-target-content"]], template: function MzFeatureDiscoveryComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } }, styles: ["[_nghost-%COMP%]{display:block}"] });
/** @nocollapse */
MzFeatureDiscoveryComponent.ctorParameters = () => [
    { type: ElementRef, },
];
MzFeatureDiscoveryComponent.propDecorators = {
    "targetClass": [{ type: HostBinding, args: ['class.tap-target',] },],
    "targetId": [{ type: HostBinding, args: ['attr.data-activates',] }, { type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzFeatureDiscoveryComponent, [{
        type: Component,
        args: [{
                selector: 'mz-feature-discovery',
                template: `<div class="tap-target-content">
  <ng-content></ng-content>
</div>
`,
                styles: [`:host{display:block}`]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { targetClass: [{
            type: HostBinding,
            args: ['class.tap-target']
        }], targetId: [{
            type: HostBinding,
            args: ['attr.data-activates']
        }, {
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzFeatureDiscoveryModule {
}
MzFeatureDiscoveryModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzFeatureDiscoveryModule });
MzFeatureDiscoveryModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzFeatureDiscoveryModule_Factory(t) { return new (t || MzFeatureDiscoveryModule)(); }, imports: [[
            CommonModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzFeatureDiscoveryModule, { declarations: function () { return [MzFeatureDiscoveryComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [MzFeatureDiscoveryComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzFeatureDiscoveryModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                ],
                declarations: [
                    MzFeatureDiscoveryComponent,
                ],
                exports: [
                    MzFeatureDiscoveryComponent,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzIconDirective extends HandlePropChanges {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        super();
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initHandlers();
        this.initMaterialize();
        super.executePropHandlers();
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            align: (previousValue) => this.handleAlign(previousValue),
            icon: () => this.handleIcon(),
            size: (previousValue) => this.handleSize(previousValue),
        };
    }
    /**
     * @return {?}
     */
    initMaterialize() {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'material-icons', true);
    }
    /**
     * @param {?=} previousValue
     * @return {?}
     */
    handleAlign(previousValue) {
        if (previousValue) {
            this.renderer.setElementClass(this.elementRef.nativeElement, previousValue, false);
        }
        if (this.align) {
            this.renderer.setElementClass(this.elementRef.nativeElement, this.align, true);
        }
    }
    /**
     * @return {?}
     */
    handleIcon() {
        this.renderer.setElementProperty(this.elementRef.nativeElement, 'innerHTML', this.icon);
    }
    /**
     * @param {?=} previousValue
     * @return {?}
     */
    handleSize(previousValue) {
        if (previousValue) {
            this.renderer.setElementClass(this.elementRef.nativeElement, previousValue, false);
        }
        if (this.size) {
            this.renderer.setElementClass(this.elementRef.nativeElement, this.size, true);
        }
    }
}
MzIconDirective.ɵfac = function MzIconDirective_Factory(t) { return new (t || MzIconDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
MzIconDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzIconDirective, selectors: [["i", "mz-icon", ""], ["i", "mzIcon", ""]], inputs: { align: "align", icon: "icon", size: "size" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/** @nocollapse */
MzIconDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];
MzIconDirective.propDecorators = {
    "align": [{ type: Input },],
    "icon": [{ type: Input },],
    "size": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzIconDirective, [{
        type: Directive,
        args: [{
                selector: 'i[mz-icon], i[mzIcon]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: Renderer }]; }, { align: [{
            type: Input
        }], icon: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzIconModule {
}
MzIconModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzIconModule });
MzIconModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzIconModule_Factory(t) { return new (t || MzIconModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzIconModule, { declarations: [MzIconDirective], exports: [MzIconDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzIconModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    MzIconDirective,
                ],
                exports: [
                    MzIconDirective,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzIconMdiDirective extends HandlePropChanges {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        super();
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initHandlers();
        this.initMaterialize();
        super.executePropHandlers();
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            align: (previousValue) => this.handleAlign(previousValue),
            flip: (previousValue) => this.handleFlip(previousValue),
            icon: (previousValue) => this.handleIcon(previousValue),
            rotate: (previousValue) => this.handleRotate(previousValue),
            size: (previousValue) => this.handleSize(previousValue),
        };
    }
    /**
     * @return {?}
     */
    initMaterialize() {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi', true);
    }
    /**
     * @param {?=} previousValue
     * @return {?}
     */
    handleAlign(previousValue) {
        if (previousValue) {
            this.renderer.setElementClass(this.elementRef.nativeElement, previousValue, false);
        }
        if (this.align) {
            this.renderer.setElementClass(this.elementRef.nativeElement, this.align, true);
        }
    }
    /**
     * @param {?=} previousValue
     * @return {?}
     */
    handleFlip(previousValue) {
        if (previousValue) {
            this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-flip-' + previousValue, false);
        }
        this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-flip-' + this.flip, !!this.flip);
    }
    /**
     * @param {?=} previousValue
     * @return {?}
     */
    handleIcon(previousValue) {
        if (previousValue) {
            this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-' + previousValue, false);
        }
        this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-' + this.icon, true);
    }
    /**
     * @param {?=} previousValue
     * @return {?}
     */
    handleRotate(previousValue) {
        if (previousValue) {
            this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-rotate-' + previousValue, false);
        }
        this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-rotate-' + this.rotate, !!this.rotate);
    }
    /**
     * @param {?=} previousValue
     * @return {?}
     */
    handleSize(previousValue) {
        if (!this.size) {
            this.size = '24px';
        }
        if (previousValue) {
            this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-' + previousValue, false);
        }
        this.renderer.setElementClass(this.elementRef.nativeElement, 'mdi-' + this.size, true);
    }
}
MzIconMdiDirective.ɵfac = function MzIconMdiDirective_Factory(t) { return new (t || MzIconMdiDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
MzIconMdiDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzIconMdiDirective, selectors: [["a", "mz-icon-mdi", ""], ["a", "mzIconMdi", ""], ["i", "mz-icon-mdi", ""], ["i", "mzIconMdi", ""]], inputs: { size: "size", align: "align", flip: "flip", icon: "icon", rotate: "rotate" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/** @nocollapse */
MzIconMdiDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];
MzIconMdiDirective.propDecorators = {
    "align": [{ type: Input },],
    "flip": [{ type: Input },],
    "icon": [{ type: Input },],
    "rotate": [{ type: Input },],
    "size": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzIconMdiDirective, [{
        type: Directive,
        args: [{
                selector: 'a[mz-icon-mdi], a[mzIconMdi], i[mz-icon-mdi], i[mzIconMdi]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: Renderer }]; }, { size: [{
            type: Input
        }], align: [{
            type: Input
        }], flip: [{
            type: Input
        }], icon: [{
            type: Input
        }], rotate: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzIconMdiModule {
}
MzIconMdiModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzIconMdiModule });
MzIconMdiModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzIconMdiModule_Factory(t) { return new (t || MzIconMdiModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzIconMdiModule, { declarations: [MzIconMdiDirective], exports: [MzIconMdiDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzIconMdiModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    MzIconMdiDirective,
                ],
                exports: [
                    MzIconMdiDirective,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzInputContainerComponent {
}
MzInputContainerComponent.ɵfac = function MzInputContainerComponent_Factory(t) { return new (t || MzInputContainerComponent)(); };
MzInputContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzInputContainerComponent, selectors: [["mz-input-container"]], inputs: { inline: "inline" }, ngContentSelectors: _c5, decls: 2, vars: 2, consts: [[1, "input-field"]], template: function MzInputContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("inline", ctx.inline);
    } }, styles: [""] });
/** @nocollapse */
MzInputContainerComponent.propDecorators = {
    "inline": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzInputContainerComponent, [{
        type: Component,
        args: [{
                selector: 'mz-input-container',
                template: `<div
  class="input-field"
  [class.inline]="inline"
>
  <ng-content></ng-content>
</div>`,
                styles: [``]
            }]
    }], null, { inline: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzInputPrefixDirective {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'prefix', true);
    }
}
MzInputPrefixDirective.ɵfac = function MzInputPrefixDirective_Factory(t) { return new (t || MzInputPrefixDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
MzInputPrefixDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzInputPrefixDirective, selectors: [["i", "mzInputPrefix", ""], ["i", "mz-input-prefix", ""]] });
/** @nocollapse */
MzInputPrefixDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzInputPrefixDirective, [{
        type: Directive,
        args: [{
                selector: 'i[mzInputPrefix], i[mz-input-prefix]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: Renderer }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzInputDirective extends HandlePropChanges {
    /**
     * @param {?} ngControl
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(ngControl, elementRef, renderer) {
        super();
        this.ngControl = ngControl;
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initHandlers();
        this.initElements();
        this.initInputSubscription();
        this.handleProperties();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.inputValueSubscription) {
            this.inputValueSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            autocomplete: () => this.handleAutocomplete(),
            dataError: () => this.handleDataError(),
            dataSuccess: () => this.handleDataSuccess(),
            label: () => this.handleLabel(),
            length: () => this.handleLength(),
            placeholder: () => this.handlePlaceholder(),
            validate: () => this.handleValidate(),
        };
    }
    /**
     * @return {?}
     */
    initElements() {
        this.inputElement = $(this.elementRef.nativeElement);
        this.inputContainerElement = $(this.elementRef.nativeElement).parent('.input-field');
        this.labelElement = this.createLabelElement();
    }
    /**
     * @return {?}
     */
    initInputSubscription() {
        if (this.ngControl) {
            this.inputValueSubscription = this.ngControl.valueChanges.subscribe(() => this.setLabelActive());
        }
    }
    /**
     * @return {?}
     */
    createLabelElement() {
        const /** @type {?} */ labelElement = document.createElement('label');
        labelElement.setAttribute('for', this.id);
        this.renderer.invokeElementMethod(this.inputElement, 'after', [labelElement]);
        return $(labelElement);
    }
    /**
     * @return {?}
     */
    handleProperties() {
        if (this.inputContainerElement.length === 0) {
            console.error('Input with mz-input directive must be placed inside an [mz-input-container] tag', this.inputElement);
            return;
        }
        super.executePropHandlers();
    }
    /**
     * @return {?}
     */
    handleAutocomplete() {
        const /** @type {?} */ isAutocomplete = this.autocomplete != null
            && this.autocomplete.data != null
            && Object.keys(this.autocomplete.data).length > 0;
        this.renderer.setElementClass(this.inputElement[0], 'autocomplete', isAutocomplete);
        if (this.autocomplete != null) {
            // wait until autocomplete is defined before to invoke
            // see issue: https://github.com/Dogfalo/materialize/issues/4401
            interval(100)
                .pipe(skipWhile(() => !this.inputElement['autocomplete']), first())
                .subscribe(() => this.renderer.invokeElementMethod(this.inputElement, 'autocomplete', [this.autocomplete]));
        }
    }
    /**
     * @return {?}
     */
    handleDataError() {
        this.renderer.setElementAttribute(this.labelElement[0], 'data-error', this.dataError);
    }
    /**
     * @return {?}
     */
    handleDataSuccess() {
        this.renderer.setElementAttribute(this.labelElement[0], 'data-success', this.dataSuccess);
    }
    /**
     * @return {?}
     */
    handleLabel() {
        this.renderer.invokeElementMethod(this.labelElement, 'text', [this.label]);
    }
    /**
     * @return {?}
     */
    handleLength() {
        const /** @type {?} */ length = this.length ? this.length.toString() : null;
        this.renderer.setElementAttribute(this.inputElement[0], 'data-length', length);
        if (length) {
            this.setCharacterCount();
        }
        else {
            this.removeCharacterCount();
        }
    }
    /**
     * @return {?}
     */
    handlePlaceholder() {
        const /** @type {?} */ placeholder = !!this.placeholder ? this.placeholder : null;
        this.renderer.setElementAttribute(this.inputElement[0], 'placeholder', placeholder);
        // fix issue in IE where having a placeholder on input make control dirty
        // note that it still trigger validation on focus but this is better than nothing
        // issue : https://github.com/angular/angular/issues/15299
        // workaround : https://stackoverflow.com/a/44967245/5583283
        if (this.ngControl) {
            setTimeout(() => this.ngControl.control.markAsPristine());
        }
        this.setLabelActive();
    }
    /**
     * @return {?}
     */
    handleValidate() {
        this.renderer.setElementClass(this.inputElement[0], 'validate', this.validate);
        if (this.validate) {
            // force validation
            this.renderer.invokeElementMethod(this.inputElement, 'trigger', ['blur']);
        }
        else {
            this.removeValidationClasses();
        }
    }
    /**
     * @return {?}
     */
    setCharacterCount() {
        this.renderer.invokeElementMethod(this.inputElement, 'characterCounter');
        // force validation
        // need setTimeout otherwise it wont trigger validation right away
        setTimeout(() => {
            this.renderer.invokeElementMethod(this.inputElement, 'trigger', ['input']);
            this.renderer.invokeElementMethod(this.inputElement, 'trigger', ['blur']);
        });
    }
    /**
     * @return {?}
     */
    setLabelActive() {
        // need setTimeout otherwise it wont make label float in some circonstances
        // for example: forcing validation for example, reseting form programmaticaly, ...
        setTimeout(() => {
            const /** @type {?} */ inputValue = (/** @type {?} */ (this.inputElement[0])).value;
            const /** @type {?} */ isActive = !!this.placeholder || !!inputValue;
            this.renderer.setElementClass(this.labelElement[0], 'active', isActive);
        });
    }
    /**
     * @return {?}
     */
    removeCharacterCount() {
        this.renderer.invokeElementMethod(this.inputElement.siblings('.character-counter'), 'remove');
        this.removeValidationClasses();
    }
    /**
     * @return {?}
     */
    removeValidationClasses() {
        // reset valid/invalid state
        this.renderer.setElementClass(this.inputElement[0], 'invalid', false);
        this.renderer.setElementClass(this.inputElement[0], 'valid', false);
    }
}
MzInputDirective.ɵfac = function MzInputDirective_Factory(t) { return new (t || MzInputDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
MzInputDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzInputDirective, selectors: [["input", "mzInput", ""], ["input", "mz-input", ""]], inputs: { id: "id", placeholder: "placeholder", autocomplete: "autocomplete", dataError: "dataError", dataSuccess: "dataSuccess", label: "label", length: "length", validate: "validate" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/** @nocollapse */
MzInputDirective.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional },] },
    { type: ElementRef, },
    { type: Renderer, },
];
MzInputDirective.propDecorators = {
    "id": [{ type: Input },],
    "placeholder": [{ type: Input },],
    "autocomplete": [{ type: Input },],
    "dataError": [{ type: Input },],
    "dataSuccess": [{ type: Input },],
    "label": [{ type: Input },],
    "length": [{ type: Input },],
    "validate": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzInputDirective, [{
        type: Directive,
        args: [{
                selector: 'input[mzInput], input[mz-input]'
            }]
    }], function () { return [{ type: ɵngcc2.NgControl, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.ElementRef }, { type: Renderer }]; }, { id: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], autocomplete: [{
            type: Input
        }], dataError: [{
            type: Input
        }], dataSuccess: [{
            type: Input
        }], label: [{
            type: Input
        }], length: [{
            type: Input
        }], validate: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzInputModule {
}
MzInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzInputModule });
MzInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzInputModule_Factory(t) { return new (t || MzInputModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzInputModule, { declarations: [MzInputContainerComponent, MzInputDirective, MzInputPrefixDirective], exports: [MzInputContainerComponent, MzInputDirective, MzInputPrefixDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzInputModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    MzInputContainerComponent,
                    MzInputDirective,
                    MzInputPrefixDirective,
                ],
                exports: [
                    MzInputContainerComponent,
                    MzInputDirective,
                    MzInputPrefixDirective,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzMediaService {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        this.mediaBreakpoints = [
            { alias: 's', minWidth: 0, maxWidth: 600 },
            { alias: 'm', minWidth: 601, maxWidth: 992 },
            { alias: 'l', minWidth: 993, maxWidth: 1200 },
            { alias: 'xl', minWidth: 1201, maxWidth: Number.MAX_VALUE },
        ];
        this.matchOperators = [
            {
                operator: 'gt',
                match: (breakpoint) => window.innerWidth > breakpoint.maxWidth,
            },
            {
                operator: 'lt',
                match: (breakpoint) => window.innerWidth < breakpoint.minWidth,
            },
            {
                operator: null,
                match: (breakpoint) => window.innerWidth >= breakpoint.minWidth && window.innerWidth <= breakpoint.maxWidth,
            },
        ];
        if (isPlatformBrowser(platformId)) {
            this.media = this.registerWindowResizeListener();
        }
        else {
            this.media = Observable.create();
        }
    }
    /**
     * @param {?} breakpoint
     * @return {?}
     */
    isActive(breakpoint) {
        return new Observable(subscriber => {
            this.media.subscribe((media) => {
                try {
                    subscriber.next(this.isActiveBreakpoint(breakpoint));
                }
                catch (/** @type {?} */ error) {
                    subscriber.error(error);
                }
            });
        });
    }
    /**
     * @return {?}
     */
    registerWindowResizeListener() {
        return fromEvent(window, 'resize')
            .pipe(map(() => this.getWindowMedia()), startWith(this.getWindowMedia()), publishReplay(1), refCount());
    }
    /**
     * @return {?}
     */
    getWindowMedia() {
        return {
            alias: this.mediaBreakpoints.find((breakpoint) => window.innerWidth <= breakpoint.maxWidth).alias,
            windowHeight: window.innerHeight,
            windowWidth: window.innerWidth,
        };
    }
    /**
     * @param {?} breakpoint
     * @return {?}
     */
    isActiveBreakpoint(breakpoint) {
        let /** @type {?} */ matchOperator;
        let /** @type {?} */ mediaBreakpoint;
        if (breakpoint) {
            const /** @type {?} */ fragments = breakpoint.split('-');
            if (fragments.length === 1) {
                matchOperator = this.matchOperators.find(x => x.operator === null);
                mediaBreakpoint = this.mediaBreakpoints.find(x => x.alias === fragments[0]);
            }
            else if (fragments.length === 2) {
                matchOperator = this.matchOperators.find(x => x.operator === fragments[0]);
                mediaBreakpoint = this.mediaBreakpoints.find(x => x.alias === fragments[1]);
            }
        }
        if (!mediaBreakpoint || !matchOperator) {
            throw Error(`MzMediaService.isActive parameter is invalid: '${breakpoint}' is not a recognized breakpoint.`);
        }
        return matchOperator.match(mediaBreakpoint);
    }
}
MzMediaService.ɵfac = function MzMediaService_Factory(t) { return new (t || MzMediaService)(ɵngcc0.ɵɵinject(PLATFORM_ID)); };
MzMediaService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MzMediaService, factory: MzMediaService.ɵfac });
/** @nocollapse */
MzMediaService.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzMediaService, [{
        type: Injectable
    }], function () { return [{ type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzMediaModule {
}
MzMediaModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzMediaModule });
MzMediaModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzMediaModule_Factory(t) { return new (t || MzMediaModule)(); }, providers: [MzMediaService] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzMediaModule, [{
        type: NgModule,
        args: [{
                providers: [MzMediaService]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzModalComponent extends HandlePropChanges {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        super();
        this.renderer = renderer;
        this.close = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initHandlers();
        this.initElements();
        this.handleProperties();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initModal();
    }
    /**
     * @return {?}
     */
    initElements() {
        this.modalElement = $(this.modalElementRef.nativeElement);
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            options: () => this.handleOptions(),
        };
    }
    /**
     * @return {?}
     */
    initModal() {
        this.renderer.invokeElementMethod(this.modalElement, 'modal', [this.options]);
    }
    /**
     * @return {?}
     */
    handleProperties() {
        super.executePropHandlers();
    }
    /**
     * @return {?}
     */
    handleOptions() {
        // extend complete function to emit close event on callback return
        const /** @type {?} */ originalCompleteFn = this.options && this.options.complete || (() => { });
        this.options = Object.assign({}, this.options, {
            complete: () => {
                originalCompleteFn();
                this.close.emit();
            },
        });
    }
    /**
     * @return {?}
     */
    openModal() {
        this.renderer.invokeElementMethod(this.modalElement, 'modal', ['open']);
    }
    /**
     * @return {?}
     */
    closeModal() {
        this.renderer.invokeElementMethod(this.modalElement, 'modal', ['close']);
    }
}
MzModalComponent.ɵfac = function MzModalComponent_Factory(t) { return new (t || MzModalComponent)(ɵngcc0.ɵɵdirectiveInject(Renderer)); };
MzModalComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzModalComponent, selectors: [["mz-modal"]], viewQuery: function MzModalComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c9, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.modalElementRef = _t.first);
    } }, inputs: { options: "options", bottomSheet: "bottomSheet", fixedFooter: "fixedFooter", fullscreen: "fullscreen" }, outputs: { close: "close" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c11, decls: 8, vars: 6, consts: [[1, "modal"], ["modal", ""], [1, "modal-content"], [1, "modal-footer"]], template: function MzModalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c10);
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵprojection(3);
        ɵngcc0.ɵɵelementStart(4, "div");
        ɵngcc0.ɵɵprojection(5, 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 3);
        ɵngcc0.ɵɵprojection(7, 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("modal-fixed-footer", ctx.fixedFooter)("bottom-sheet", ctx.bottomSheet)("modal-fullscreen", ctx.fullscreen);
    } }, styles: [".modal[_ngcontent-%COMP%]:not(.bottom-sheet).modal-fullscreen{top:12px!important;margin:0 auto;width:calc(100% - 24px);height:calc(100% - 24px);max-height:none}.modal.bottom-sheet.modal-fullscreen[_ngcontent-%COMP%]{height:100%;max-height:none}  mz-modal-header h5,   mz-modal-header h6{margin-top:0}"] });
/** @nocollapse */
MzModalComponent.ctorParameters = () => [
    { type: Renderer, },
];
MzModalComponent.propDecorators = {
    "bottomSheet": [{ type: Input },],
    "fixedFooter": [{ type: Input },],
    "fullscreen": [{ type: Input },],
    "options": [{ type: Input },],
    "close": [{ type: Output },],
    "modalElementRef": [{ type: ViewChild, args: ['modal',] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzModalComponent, [{
        type: Component,
        args: [{
                selector: 'mz-modal',
                template: `<div #modal
  class="modal"
  [class.modal-fixed-footer]="fixedFooter"
  [class.bottom-sheet]="bottomSheet"
  [class.modal-fullscreen]="fullscreen"
>
  <div class="modal-content">
    <ng-content select="mz-modal-header"></ng-content>
    <div>
      <ng-content select="mz-modal-content"></ng-content>
    </div>
  </div>
  <div class="modal-footer">
    <ng-content select="mz-modal-footer"></ng-content>
  </div>
</div>
`,
                styles: [`.modal:not(.bottom-sheet).modal-fullscreen{top:12px!important;margin:0 auto;width:calc(100% - 24px);height:calc(100% - 24px);max-height:none}.modal.bottom-sheet.modal-fullscreen{height:100%;max-height:none}/deep/ mz-modal-header h5,/deep/ mz-modal-header h6{margin-top:0}`]
            }]
    }], function () { return [{ type: Renderer }]; }, { close: [{
            type: Output
        }], options: [{
            type: Input
        }], bottomSheet: [{
            type: Input
        }], fixedFooter: [{
            type: Input
        }], fullscreen: [{
            type: Input
        }], modalElementRef: [{
            type: ViewChild,
            args: ['modal']
        }] }); })();
class MzModalHeaderDirective {
}
MzModalHeaderDirective.ɵfac = function MzModalHeaderDirective_Factory(t) { return new (t || MzModalHeaderDirective)(); };
MzModalHeaderDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzModalHeaderDirective, selectors: [["mz-modal-header"]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzModalHeaderDirective, [{
        type: Directive,
        args: [{ selector: 'mz-modal-header' }]
    }], null, null); })();
class MzModalContentDirective {
}
MzModalContentDirective.ɵfac = function MzModalContentDirective_Factory(t) { return new (t || MzModalContentDirective)(); };
MzModalContentDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzModalContentDirective, selectors: [["mz-modal-content"]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzModalContentDirective, [{
        type: Directive,
        args: [{ selector: 'mz-modal-content' }]
    }], null, null); })();
class MzModalFooterDirective {
}
MzModalFooterDirective.ɵfac = function MzModalFooterDirective_Factory(t) { return new (t || MzModalFooterDirective)(); };
MzModalFooterDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzModalFooterDirective, selectors: [["mz-modal-footer"]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzModalFooterDirective, [{
        type: Directive,
        args: [{ selector: 'mz-modal-footer' }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzModalCloseDirective {
    /**
     * @param {?} modalComponent
     */
    constructor(modalComponent) {
        this.modalComponent = modalComponent;
    }
    /**
     * @return {?}
     */
    onclick() {
        this.modalComponent.closeModal();
    }
}
MzModalCloseDirective.ɵfac = function MzModalCloseDirective_Factory(t) { return new (t || MzModalCloseDirective)(ɵngcc0.ɵɵdirectiveInject(MzModalComponent)); };
MzModalCloseDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzModalCloseDirective, selectors: [["a", "mzModalClose", ""], ["button", "mzModalClose", ""], ["a", "mz-modal-close", ""], ["button", "mz-modal-close", ""]], hostBindings: function MzModalCloseDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function MzModalCloseDirective_click_HostBindingHandler() { return ctx.onclick(); });
    } } });
/** @nocollapse */
MzModalCloseDirective.ctorParameters = () => [
    { type: MzModalComponent, },
];
MzModalCloseDirective.propDecorators = {
    "onclick": [{ type: HostListener, args: ['click',] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzModalCloseDirective, [{
        type: Directive,
        args: [{
                selector: 'a[mzModalClose], button[mzModalClose], a[mz-modal-close], button[mz-modal-close]'
            }]
    }], function () { return [{ type: MzModalComponent }]; }, { onclick: [{
            type: HostListener,
            args: ['click']
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzModalService {
    /**
     * @param {?} injectionService
     */
    constructor(injectionService) {
        this.injectionService = injectionService;
    }
    /**
     * Open modal component.
     * @param {?} componentClass
     * @param {?=} options
     * @return {?}
     */
    open(componentClass, options = {}) {
        const /** @type {?} */ componentRef = this.injectionService.appendComponent(componentClass, options);
        componentRef.instance.modalComponent.close
            .pipe(first())
            .subscribe(() => {
            componentRef.destroy();
        });
        return componentRef;
    }
}
MzModalService.ɵfac = function MzModalService_Factory(t) { return new (t || MzModalService)(ɵngcc0.ɵɵinject(MzInjectionService)); };
MzModalService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MzModalService, factory: MzModalService.ɵfac });
/** @nocollapse */
MzModalService.ctorParameters = () => [
    { type: MzInjectionService, },
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzModalService, [{
        type: Injectable
    }], function () { return [{ type: MzInjectionService }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzModalModule {
}
MzModalModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzModalModule });
MzModalModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzModalModule_Factory(t) { return new (t || MzModalModule)(); }, providers: [MzModalService], imports: [[MzInjectionModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzModalModule, { declarations: [MzModalCloseDirective, MzModalComponent, MzModalContentDirective, MzModalFooterDirective, MzModalHeaderDirective], imports: [MzInjectionModule], exports: [MzModalCloseDirective, MzModalComponent, MzModalContentDirective, MzModalFooterDirective, MzModalHeaderDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzModalModule, [{
        type: NgModule,
        args: [{
                imports: [MzInjectionModule],
                declarations: [
                    MzModalCloseDirective,
                    MzModalComponent,
                    MzModalContentDirective,
                    MzModalFooterDirective,
                    MzModalHeaderDirective,
                ],
                exports: [
                    MzModalCloseDirective,
                    MzModalComponent,
                    MzModalContentDirective,
                    MzModalFooterDirective,
                    MzModalHeaderDirective,
                ],
                providers: [MzModalService]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzNavbarItemContainerComponent {
}
MzNavbarItemContainerComponent.ɵfac = function MzNavbarItemContainerComponent_Factory(t) { return new (t || MzNavbarItemContainerComponent)(); };
MzNavbarItemContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzNavbarItemContainerComponent, selectors: [["mz-navbar-item-container"]], inputs: { align: "align" }, ngContentSelectors: _c5, decls: 2, vars: 3, consts: [["id", "nav-mobile"]], template: function MzNavbarItemContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "ul", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.align);
    } }, styles: [""] });
/** @nocollapse */
MzNavbarItemContainerComponent.propDecorators = {
    "align": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzNavbarItemContainerComponent, [{
        type: Component,
        args: [{
                selector: 'mz-navbar-item-container',
                template: `<ul id="nav-mobile" class="{{ align }}">
  <ng-content></ng-content>
</ul>`,
                styles: [``]
            }]
    }], null, { align: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzNavbarItemComponent {
}
MzNavbarItemComponent.ɵfac = function MzNavbarItemComponent_Factory(t) { return new (t || MzNavbarItemComponent)(); };
MzNavbarItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzNavbarItemComponent, selectors: [["mz-navbar-item"]], inputs: { active: "active", itemClass: "itemClass" }, ngContentSelectors: _c5, decls: 2, vars: 5, template: function MzNavbarItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "li");
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.itemClass);
        ɵngcc0.ɵɵclassProp("active", ctx.active);
    } }, styles: [""] });
/** @nocollapse */
MzNavbarItemComponent.propDecorators = {
    "active": [{ type: Input },],
    "itemClass": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzNavbarItemComponent, [{
        type: Component,
        args: [{
                selector: 'mz-navbar-item',
                template: `<li 
  class="{{ itemClass }}"
  [class.active]="active"
>
  <ng-content></ng-content>
</li>`,
                styles: [``]
            }]
    }], null, { active: [{
            type: Input
        }], itemClass: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzNavbarComponent {
}
MzNavbarComponent.ɵfac = function MzNavbarComponent_Factory(t) { return new (t || MzNavbarComponent)(); };
MzNavbarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzNavbarComponent, selectors: [["mz-navbar"]], inputs: { navbarClass: "navbarClass" }, ngContentSelectors: _c5, decls: 3, vars: 3, template: function MzNavbarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "nav");
        ɵngcc0.ɵɵelementStart(1, "div");
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMapInterpolate1("nav-wrapper ", ctx.navbarClass, "");
    } }, styles: [".nav-wrapper[_ngcontent-%COMP%]     .btn i{line-height:inherit}"] });
/** @nocollapse */
MzNavbarComponent.propDecorators = {
    "navbarClass": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzNavbarComponent, [{
        type: Component,
        args: [{
                selector: 'mz-navbar',
                template: `<nav>
  <div class="nav-wrapper {{ navbarClass }}">
    <ng-content></ng-content>
  </div>
</nav>`,
                styles: [`.nav-wrapper /deep/ .btn i{line-height:inherit}`]
            }]
    }], null, { navbarClass: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzNavbarModule {
}
MzNavbarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzNavbarModule });
MzNavbarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzNavbarModule_Factory(t) { return new (t || MzNavbarModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzNavbarModule, { declarations: [MzNavbarComponent, MzNavbarItemComponent, MzNavbarItemContainerComponent], exports: [MzNavbarComponent, MzNavbarItemComponent, MzNavbarItemContainerComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzNavbarModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    MzNavbarComponent,
                    MzNavbarItemComponent,
                    MzNavbarItemContainerComponent,
                ],
                exports: [
                    MzNavbarComponent,
                    MzNavbarItemComponent,
                    MzNavbarItemContainerComponent,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzPaginationPageButtonComponent {
}
MzPaginationPageButtonComponent.ɵfac = function MzPaginationPageButtonComponent_Factory(t) { return new (t || MzPaginationPageButtonComponent)(); };
MzPaginationPageButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzPaginationPageButtonComponent, selectors: [["mz-pagination-page-button"]], inputs: { active: "active", disabled: "disabled" }, ngContentSelectors: _c5, decls: 2, vars: 6, template: function MzPaginationPageButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "li");
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("active", ctx.active)("disabled", ctx.disabled)("waves-effect", !ctx.active && !ctx.disabled);
    } }, styles: [""] });
/** @nocollapse */
MzPaginationPageButtonComponent.propDecorators = {
    "active": [{ type: Input },],
    "disabled": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzPaginationPageButtonComponent, [{
        type: Component,
        args: [{
                selector: 'mz-pagination-page-button',
                template: `<li [class.active]="active"
  [class.disabled]="disabled"
  [class.waves-effect]="!active && !disabled">
  <ng-content></ng-content>
</li>`,
                styles: [``]
            }]
    }], null, { active: [{
            type: Input
        }], disabled: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzPaginationComponent extends HandlePropChanges {
    constructor() {
        super();
        this.currentPage = 1;
        this.enableFirstAndLastPageButtons = false;
        this.maxPageButtons = 5;
        this.pageChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get totalPages() {
        return Math.ceil(this.totalItems / this.itemsPerPage);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initHandlers();
        this.renderButtons();
    }
    /**
     * @param {?} pageNumber
     * @return {?}
     */
    changeCurrentPage(pageNumber) {
        this.currentPage = pageNumber;
        this.pageChange.emit(pageNumber);
        this.renderButtons();
    }
    /**
     * @return {?}
     */
    firstPage() {
        this.changeCurrentPage(1);
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            currentPage: () => this.renderButtons(),
            itemsPerPage: () => this.renderButtons(),
            maxPageButtons: () => this.renderButtons(),
            totalItems: () => this.renderButtons(),
        };
    }
    /**
     * @return {?}
     */
    lastPage() {
        this.changeCurrentPage(this.totalPages);
    }
    /**
     * @return {?}
     */
    nextPage() {
        if (this.currentPage < this.totalPages) {
            const /** @type {?} */ nextPage = this.currentPage + 1;
            this.changeCurrentPage(nextPage);
        }
    }
    /**
     * @return {?}
     */
    previousPage() {
        if (this.currentPage !== 1) {
            const /** @type {?} */ previousPage = this.currentPage - 1;
            this.changeCurrentPage(previousPage);
        }
    }
    /**
     * @return {?}
     */
    renderButtons() {
        const /** @type {?} */ buttonsCount = Math.min(this.maxPageButtons, this.totalPages);
        const /** @type {?} */ maxPosition = this.totalPages - buttonsCount;
        const /** @type {?} */ halfButtons = Math.floor(buttonsCount / 2);
        let /** @type {?} */ hiddenPagesBefore = (this.currentPage - halfButtons);
        if (hiddenPagesBefore > maxPosition) {
            hiddenPagesBefore = maxPosition + 1;
        }
        const /** @type {?} */ from = Math.max(hiddenPagesBefore, 1);
        const /** @type {?} */ to = Math.min(this.totalPages, from + this.maxPageButtons - 1);
        this.pages = Array(buttonsCount).fill(0).map((x, i) => from + i);
        if (this.currentPage > this.totalPages) {
            this.currentPage = this.pages[0];
        }
    }
}
MzPaginationComponent.ɵfac = function MzPaginationComponent_Factory(t) { return new (t || MzPaginationComponent)(); };
MzPaginationComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzPaginationComponent, selectors: [["mz-pagination"]], inputs: { currentPage: "currentPage", enableFirstAndLastPageButtons: "enableFirstAndLastPageButtons", maxPageButtons: "maxPageButtons", itemsPerPage: "itemsPerPage", totalItems: "totalItems" }, outputs: { pageChange: "pageChange" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 10, vars: 7, consts: [[1, "pagination"], [3, "disabled", 4, "ngIf"], [3, "disabled"], [3, "click"], ["mz-icon", "", 3, "icon"], [3, "active", 4, "ngFor", "ngForOf"], [3, "active"]], template: function MzPaginationComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "ul", 0);
        ɵngcc0.ɵɵtemplate(1, MzPaginationComponent_mz_pagination_page_button_1_Template, 3, 2, "mz-pagination-page-button", 1);
        ɵngcc0.ɵɵelementStart(2, "mz-pagination-page-button", 2);
        ɵngcc0.ɵɵelementStart(3, "a", 3);
        ɵngcc0.ɵɵlistener("click", function MzPaginationComponent_Template_a_click_3_listener() { return ctx.previousPage(); });
        ɵngcc0.ɵɵelement(4, "i", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, MzPaginationComponent_mz_pagination_page_button_5_Template, 3, 2, "mz-pagination-page-button", 5);
        ɵngcc0.ɵɵelementStart(6, "mz-pagination-page-button", 2);
        ɵngcc0.ɵɵelementStart(7, "a", 3);
        ɵngcc0.ɵɵlistener("click", function MzPaginationComponent_Template_a_click_7_listener() { return ctx.nextPage(); });
        ɵngcc0.ɵɵelement(8, "i", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(9, MzPaginationComponent_mz_pagination_page_button_9_Template, 3, 2, "mz-pagination-page-button", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.enableFirstAndLastPageButtons);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.currentPage === 1);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("icon", "chevron_left");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.pages);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.currentPage === ctx.totalPages);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("icon", "chevron_right");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.enableFirstAndLastPageButtons);
    } }, directives: [ɵngcc1.NgIf, MzPaginationPageButtonComponent, MzIconDirective, ɵngcc1.NgForOf], styles: [""] });
/** @nocollapse */
MzPaginationComponent.ctorParameters = () => [];
MzPaginationComponent.propDecorators = {
    "currentPage": [{ type: Input },],
    "enableFirstAndLastPageButtons": [{ type: Input },],
    "itemsPerPage": [{ type: Input },],
    "maxPageButtons": [{ type: Input },],
    "totalItems": [{ type: Input },],
    "pageChange": [{ type: Output },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzPaginationComponent, [{
        type: Component,
        args: [{
                selector: 'mz-pagination',
                template: `
  <ul class="pagination">
    <mz-pagination-page-button [disabled]="currentPage === 1" *ngIf="enableFirstAndLastPageButtons">
      <a (click)="firstPage()"><i mz-icon [icon]="'first_page'"></i></a>
    </mz-pagination-page-button>
    <mz-pagination-page-button [disabled]="currentPage === 1">
      <a (click)="previousPage()"><i mz-icon [icon]="'chevron_left'"></i></a>
    </mz-pagination-page-button>
    <mz-pagination-page-button *ngFor="let page of pages"
      [active]="page === currentPage"
    >
      <a (click)="changeCurrentPage(page)">{{ page }}</a>
    </mz-pagination-page-button>
    <mz-pagination-page-button [disabled]="currentPage === totalPages">
      <a (click)="nextPage()"><i mz-icon [icon]="'chevron_right'"></i></a>
    </mz-pagination-page-button>
    <mz-pagination-page-button [disabled]="currentPage === totalPages" *ngIf="enableFirstAndLastPageButtons">
      <a (click)="lastPage()"><i mz-icon [icon]="'last_page'"></i></a>
    </mz-pagination-page-button>
  </ul>`,
                styles: [``]
            }]
    }], function () { return []; }, { currentPage: [{
            type: Input
        }], enableFirstAndLastPageButtons: [{
            type: Input
        }], maxPageButtons: [{
            type: Input
        }], pageChange: [{
            type: Output
        }], itemsPerPage: [{
            type: Input
        }], totalItems: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzPaginationModule {
}
MzPaginationModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzPaginationModule });
MzPaginationModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzPaginationModule_Factory(t) { return new (t || MzPaginationModule)(); }, imports: [[
            CommonModule,
            MzIconModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzPaginationModule, { declarations: function () { return [MzPaginationComponent, MzPaginationPageButtonComponent]; }, imports: function () { return [CommonModule, MzIconModule]; }, exports: function () { return [MzPaginationComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzPaginationModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MzIconModule,
                ],
                declarations: [
                    MzPaginationComponent,
                    MzPaginationPageButtonComponent,
                ],
                exports: [
                    MzPaginationComponent,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzParallaxComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.renderer.setElementStyle(this.parallaxContainer.nativeElement, 'height', isNaN(this.height) ? '500px' : this.height + 'px');
        this.renderer.invokeElementMethod($(this.parallax.nativeElement), 'parallax');
    }
}
MzParallaxComponent.ɵfac = function MzParallaxComponent_Factory(t) { return new (t || MzParallaxComponent)(ɵngcc0.ɵɵdirectiveInject(Renderer)); };
MzParallaxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzParallaxComponent, selectors: [["mz-parallax"]], viewQuery: function MzParallaxComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c12, true);
        ɵngcc0.ɵɵviewQuery(_c13, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.parallax = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.parallaxContainer = _t.first);
    } }, inputs: { height: "height" }, ngContentSelectors: _c5, decls: 5, vars: 0, consts: [[1, "parallax-container"], ["parallaxContainer", ""], [1, "parallax"], ["parallax", ""]], template: function MzParallaxComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2, 3);
        ɵngcc0.ɵɵprojection(4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } }, styles: [""] });
/** @nocollapse */
MzParallaxComponent.ctorParameters = () => [
    { type: Renderer, },
];
MzParallaxComponent.propDecorators = {
    "height": [{ type: Input },],
    "parallax": [{ type: ViewChild, args: ['parallax',] },],
    "parallaxContainer": [{ type: ViewChild, args: ['parallaxContainer',] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzParallaxComponent, [{
        type: Component,
        args: [{
                selector: 'mz-parallax',
                template: `<div #parallaxContainer class="parallax-container">
  <div #parallax class="parallax">
    <ng-content></ng-content>
  </div>
</div>`,
                styles: [``]
            }]
    }], function () { return [{ type: Renderer }]; }, { height: [{
            type: Input
        }], parallax: [{
            type: ViewChild,
            args: ['parallax']
        }], parallaxContainer: [{
            type: ViewChild,
            args: ['parallaxContainer']
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzParallaxModule {
}
MzParallaxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzParallaxModule });
MzParallaxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzParallaxModule_Factory(t) { return new (t || MzParallaxModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzParallaxModule, { declarations: [MzParallaxComponent], exports: [MzParallaxComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzParallaxModule, [{
        type: NgModule,
        args: [{
                declarations: [MzParallaxComponent],
                exports: [MzParallaxComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzProgressComponent {
}
MzProgressComponent.ɵfac = function MzProgressComponent_Factory(t) { return new (t || MzProgressComponent)(); };
MzProgressComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzProgressComponent, selectors: [["mz-progress"]], inputs: { backgroundClass: "backgroundClass", percentage: "percentage", progressClass: "progressClass" }, decls: 2, vars: 12, template: function MzProgressComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelement(1, "div");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("progress ", ctx.backgroundClass, "");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMapInterpolate1("progress-bar ", ctx.progressClass, "");
        ɵngcc0.ɵɵstyleProp("width", ctx.percentage, "%");
        ɵngcc0.ɵɵclassProp("determinate", ctx.percentage != null)("indeterminate", ctx.percentage == null);
    } }, styles: [""] });
/** @nocollapse */
MzProgressComponent.propDecorators = {
    "backgroundClass": [{ type: Input },],
    "percentage": [{ type: Input },],
    "progressClass": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzProgressComponent, [{
        type: Component,
        args: [{
                selector: 'mz-progress',
                template: `<div class="progress {{ backgroundClass }}">

  <div
    class="progress-bar {{ progressClass }}"
    [class.determinate]="percentage != null"
    [class.indeterminate]="percentage == null"
    [style.width.%]="percentage">
  </div>
</div>`,
                styles: [``]
            }]
    }], null, { backgroundClass: [{
            type: Input
        }], percentage: [{
            type: Input
        }], progressClass: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzProgressModule {
}
MzProgressModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzProgressModule });
MzProgressModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzProgressModule_Factory(t) { return new (t || MzProgressModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzProgressModule, { declarations: [MzProgressComponent], exports: [MzProgressComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzProgressModule, [{
        type: NgModule,
        args: [{
                declarations: [MzProgressComponent],
                exports: [MzProgressComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzRadioButtonContainerComponent {
}
MzRadioButtonContainerComponent.ɵfac = function MzRadioButtonContainerComponent_Factory(t) { return new (t || MzRadioButtonContainerComponent)(); };
MzRadioButtonContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzRadioButtonContainerComponent, selectors: [["mz-radio-button-container"]], ngContentSelectors: _c5, decls: 2, vars: 0, consts: [[1, "radio-button-field"]], template: function MzRadioButtonContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "p", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } }, styles: [""] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzRadioButtonContainerComponent, [{
        type: Component,
        args: [{
                selector: 'mz-radio-button-container',
                template: `<p class="radio-button-field">
  <ng-content></ng-content>
</p>`,
                styles: [``]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzRadioButtonDirective extends HandlePropChanges {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        super();
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initHandlers();
        this.initElements();
        this.handleProperties();
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            label: () => this.handleLabel(),
            withGap: () => this.handleWithGap(),
        };
    }
    /**
     * @return {?}
     */
    initElements() {
        this.inputElement = $(this.elementRef.nativeElement);
        this.inputContainerElement = $(this.elementRef.nativeElement).parent('.radio-button-field');
        this.labelElement = this.createLabelElement();
    }
    /**
     * @return {?}
     */
    createLabelElement() {
        const /** @type {?} */ labelElement = document.createElement('label');
        labelElement.setAttribute('for', this.id);
        this.renderer.invokeElementMethod(this.inputElement, 'after', [labelElement]);
        return $(labelElement);
    }
    /**
     * @return {?}
     */
    handleProperties() {
        if (this.inputContainerElement.length === 0) {
            console.error('Radio Button must be placed inside a [mz-radio-button-container] tag', this.inputElement);
            return;
        }
        super.executePropHandlers();
    }
    /**
     * @return {?}
     */
    handleLabel() {
        this.renderer.invokeElementMethod(this.labelElement, 'text', [this.label]);
    }
    /**
     * @return {?}
     */
    handleWithGap() {
        this.renderer.setElementClass(this.inputElement[0], 'with-gap', this.withGap);
    }
}
MzRadioButtonDirective.ɵfac = function MzRadioButtonDirective_Factory(t) { return new (t || MzRadioButtonDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
MzRadioButtonDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzRadioButtonDirective, selectors: [["input", "mzRadioButton", ""], ["input", "mz-radio-button", ""]], hostVars: 1, hostBindings: function MzRadioButtonDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("id", ctx.id);
    } }, inputs: { id: "id", label: "label", withGap: "withGap" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/** @nocollapse */
MzRadioButtonDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];
MzRadioButtonDirective.propDecorators = {
    "id": [{ type: HostBinding }, { type: Input },],
    "label": [{ type: Input },],
    "withGap": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzRadioButtonDirective, [{
        type: Directive,
        args: [{
                selector: 'input[mzRadioButton], input[mz-radio-button]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: Renderer }]; }, { id: [{
            type: HostBinding
        }, {
            type: Input
        }], label: [{
            type: Input
        }], withGap: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzRadioButtonModule {
}
MzRadioButtonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzRadioButtonModule });
MzRadioButtonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzRadioButtonModule_Factory(t) { return new (t || MzRadioButtonModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzRadioButtonModule, { declarations: [MzRadioButtonDirective, MzRadioButtonContainerComponent], exports: [MzRadioButtonDirective, MzRadioButtonContainerComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzRadioButtonModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    MzRadioButtonDirective,
                    MzRadioButtonContainerComponent,
                ],
                exports: [
                    MzRadioButtonDirective,
                    MzRadioButtonContainerComponent,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
class ErrorMessageResource {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzErrorMessageComponent {
    constructor() {
        this.errorMessage = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.buildErrorMessage();
        this.controlStatusChangesSubscription = this.control.statusChanges.subscribe(() => this.buildErrorMessage());
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.controlStatusChangesSubscription.unsubscribe();
    }
    /**
     * @return {?}
     */
    buildErrorMessage() {
        this.errorMessage = '';
        if (this.control.errors && this.errorMessageResource) {
            Object.keys(this.control.errors).forEach(key => {
                this.errorMessage += this.errorMessageResource[key] + ' ';
            });
        }
    }
}
MzErrorMessageComponent.ɵfac = function MzErrorMessageComponent_Factory(t) { return new (t || MzErrorMessageComponent)(); };
MzErrorMessageComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzErrorMessageComponent, selectors: [["mz-error-message"]], inputs: { control: "control", errorMessageResource: "errorMessageResource" }, decls: 1, vars: 1, consts: [["class", "invalid", 4, "ngIf"], [1, "invalid"]], template: function MzErrorMessageComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, MzErrorMessageComponent_div_0_Template, 2, 2, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", (ctx.control.touched || ctx.control.dirty) && ctx.control.invalid && ctx.errorMessage);
    } }, directives: [ɵngcc1.NgIf], styles: ["div.invalid[_ngcontent-%COMP%]{color:#e30613;font-size:.8rem;opacity:1;overflow-wrap:break-word}input:not([type=checkbox]) + label + [_nghost-%COMP%]   div.invalid[_ngcontent-%COMP%], mz-select-container   [_nghost-%COMP%]   div.invalid[_ngcontent-%COMP%], textarea + label + [_nghost-%COMP%]   div.invalid[_ngcontent-%COMP%]{margin-top:-19px;min-height:19px}"], data: { animation: [
            trigger('enterAnimation', [
                transition(':enter', [
                    style({ transform: 'translateY(-5px)', opacity: 0 }),
                    animate('300ms', style({ transform: 'translateY(0)', opacity: 1 })),
                ]),
                transition(':leave', [
                    style({ transform: 'translateY(0)', opacity: 1 }),
                    animate('300ms', style({ transform: 'translateY(-5px)', opacity: 0 })),
                ]),
            ]),
        ] } });
/** @nocollapse */
MzErrorMessageComponent.propDecorators = {
    "control": [{ type: Input },],
    "errorMessageResource": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzErrorMessageComponent, [{
        type: Component,
        args: [{
                selector: 'mz-error-message',
                template: `<div [@enterAnimation]="errorMessage" class="invalid" *ngIf="(control.touched || control.dirty) && control.invalid && errorMessage">{{ errorMessage }}</div>`,
                styles: [`div.invalid{color:#e30613;font-size:.8rem;opacity:1;overflow-wrap:break-word}input:not([type=checkbox])+label+:host div.invalid,mz-select-container :host div.invalid,textarea+label+:host div.invalid{margin-top:-19px;min-height:19px}`],
                animations: [
                    trigger('enterAnimation', [
                        transition(':enter', [
                            style({ transform: 'translateY(-5px)', opacity: 0 }),
                            animate('300ms', style({ transform: 'translateY(0)', opacity: 1 })),
                        ]),
                        transition(':leave', [
                            style({ transform: 'translateY(0)', opacity: 1 }),
                            animate('300ms', style({ transform: 'translateY(-5px)', opacity: 0 })),
                        ]),
                    ]),
                ]
            }]
    }], function () { return []; }, { control: [{
            type: Input
        }], errorMessageResource: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzValidationComponent {
    /**
     * @param {?} elementRef
     * @param {?} resolver
     * @param {?} viewContainerRef
     * @param {?} ngControl
     * @param {?} renderer
     */
    constructor(elementRef, resolver, viewContainerRef, ngControl, renderer) {
        this.elementRef = elementRef;
        this.resolver = resolver;
        this.viewContainerRef = viewContainerRef;
        this.ngControl = ngControl;
        this.renderer = renderer;
        this.errorMessageComponent = null;
        this._formControlDisabled = false;
        this._required = false;
    }
    /**
     * @return {?}
     */
    get required() { return this._required; }
    /**
     * @param {?} value
     * @return {?}
     */
    set required(value) { this._required = (value != null && `${value}` !== 'false'); }
    /**
     * @return {?}
     */
    get formControlDisabled() { return this._formControlDisabled; }
    /**
     * @param {?} value
     * @return {?}
     */
    set formControlDisabled(value) {
        this._formControlDisabled = value;
        if (this._formControlDisabled) {
            this.ngControl.control.disable();
        }
        else {
            this.ngControl.control.enable();
        }
    }
    /**
     * @return {?}
     */
    get elementToAddValidation() {
        return this.isNativeSelectElement
            ? this.inputSelectDropdown
            : this.nativeElement;
    }
    /**
     * @return {?}
     */
    get inputSelectDropdown() {
        return this.nativeElement.siblings('input.select-dropdown');
    }
    /**
     * @return {?}
     */
    get isNativeSelectElement() {
        return this.nativeElement[0].nodeName === 'SELECT';
    }
    /**
     * @param {?} target
     * @return {?}
     */
    onFocusOut(target) {
        this.ngControl.control.markAsTouched();
        this.setValidationState();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initElements();
        this.initErrorMessageComponent();
        this.subscribeStatusChanges();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.statusChangesSubscription.unsubscribe();
        this.errorMessageComponent.destroy();
    }
    /**
     * @param {?} element
     * @return {?}
     */
    clearValidationState(element) {
        this.renderer.setElementClass(element[0], 'valid', false);
        this.renderer.setElementClass(element[0], 'invalid', false);
    }
    /**
     * @return {?}
     */
    createRequiredSpanElement() {
        if (this.required && this.labelElement) {
            const /** @type {?} */ spanElement = document.createElement('span');
            spanElement.setAttribute('class', 'placeholder-required');
            spanElement.textContent = ' *';
            this.renderer.invokeElementMethod(this.labelElement, 'appendChild', [spanElement]);
        }
    }
    /**
     * @return {?}
     */
    initElements() {
        this.labelElement = $('label[for="' + this.id + '"]')[0];
        this.nativeElement = $(this.elementRef.nativeElement);
        this.createRequiredSpanElement();
    }
    /**
     * @return {?}
     */
    initErrorMessageComponent() {
        const /** @type {?} */ errorMessageFactory = this.resolver.resolveComponentFactory(MzErrorMessageComponent);
        this.errorMessageComponent = this.viewContainerRef.createComponent(errorMessageFactory);
        this.errorMessageComponent.instance.errorMessageResource = this.errorMessageResource;
        this.errorMessageComponent.instance.control = this.ngControl.control;
        this.errorMessageComponent.changeDetectorRef.detectChanges();
        const /** @type {?} */ errorMessage = this.nativeElement.parent().children('mz-error-message');
        this.renderer.invokeElementMethod(errorMessage, 'insertAfter', [this.labelElement]);
    }
    /**
     * @return {?}
     */
    setValidationState() {
        // to handle reset form
        if (this.ngControl.control.untouched && this.ngControl.control.pristine) {
            this.clearValidationState(this.elementToAddValidation);
            return;
        }
        // to handle field validity
        if (this.ngControl.control.enabled) {
            if (this.ngControl.control.valid) {
                this.renderer.setElementClass(this.elementToAddValidation[0], 'valid', true);
                this.renderer.setElementClass(this.elementToAddValidation[0], 'invalid', false);
            }
            else {
                this.renderer.setElementClass(this.elementToAddValidation[0], 'valid', false);
                this.renderer.setElementClass(this.elementToAddValidation[0], 'invalid', true);
            }
        }
        else {
            this.clearValidationState(this.elementToAddValidation);
        }
    }
    /**
     * @return {?}
     */
    subscribeStatusChanges() {
        this.statusChangesSubscription = this.ngControl.control.statusChanges.subscribe((status) => {
            // TODO Find a better way to handle validation after the form subscription. (see demo form-validation)
            // wait for the valueChanges method from FormGroup to have been triggered before handling the validation state
            // /!\ race condition warning /!\
            setTimeout(() => this.setValidationState());
        });
    }
}
MzValidationComponent.ɵfac = function MzValidationComponent_Factory(t) { return new (t || MzValidationComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
MzValidationComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzValidationComponent, selectors: [["mz-validation"], ["", "mz-validation", ""], ["", "mzValidation", ""]], hostVars: 1, hostBindings: function MzValidationComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("focusout", function MzValidationComponent_focusout_HostBindingHandler($event) { return ctx.onFocusOut($event.target); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("required", ctx.required);
    } }, inputs: { required: "required", formControlDisabled: "formControlDisabled", id: "id", errorMessageResource: "errorMessageResource" }, ngContentSelectors: _c5, decls: 1, vars: 0, template: function MzValidationComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: [".select-wrapper input.select-dropdown.invalid,textarea.ng-invalid.ng-touched:focus{border-bottom:1px solid #f44336;box-shadow:0 1px 0 0 #f44336}.select-wrapper input.select-dropdown.valid{border-bottom:1px solid #4caf50;box-shadow:0 1px 0 0 #4caf50}input:not([type=checkbox]):focus+label.active span.placeholder-required,textarea:focus+label.active span.placeholder-required{color:#f44336}"], encapsulation: 2 });
/** @nocollapse */
MzValidationComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: ComponentFactoryResolver, },
    { type: ViewContainerRef, },
    { type: NgControl, },
    { type: Renderer, },
];
MzValidationComponent.propDecorators = {
    "id": [{ type: Input },],
    "errorMessageResource": [{ type: Input },],
    "required": [{ type: HostBinding, args: ['attr.required',] }, { type: Input },],
    "formControlDisabled": [{ type: Input },],
    "onFocusOut": [{ type: HostListener, args: ['focusout', ['$event.target'],] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzValidationComponent, [{
        type: Component,
        args: [{
                encapsulation: ViewEncapsulation.None,
                selector: 'mz-validation, [mz-validation], [mzValidation]',
                template: `<ng-content></ng-content>`,
                styles: [`.select-wrapper input.select-dropdown.invalid,textarea.ng-invalid.ng-touched:focus{border-bottom:1px solid #f44336;box-shadow:0 1px 0 0 #f44336}.select-wrapper input.select-dropdown.valid{border-bottom:1px solid #4caf50;box-shadow:0 1px 0 0 #4caf50}input:not([type=checkbox]):focus+label.active span.placeholder-required,textarea:focus+label.active span.placeholder-required{color:#f44336}`]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc2.NgControl }, { type: Renderer }]; }, { required: [{
            type: HostBinding,
            args: ['attr.required']
        }, {
            type: Input
        }], formControlDisabled: [{
            type: Input
        }], onFocusOut: [{
            type: HostListener,
            args: ['focusout', ['$event.target']]
        }], id: [{
            type: Input
        }], errorMessageResource: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSelectDirective extends HandlePropChanges {
    /**
     * @param {?} elementRef
     * @param {?} changeDetectorRef
     * @param {?} renderer
     */
    constructor(elementRef, changeDetectorRef, renderer) {
        super();
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.renderer = renderer;
        this.update = new EventEmitter();
        this.suspend = false;
    }
    /**
     * @return {?}
     */
    get inputElement() {
        return this.selectElement.siblings('input.select-dropdown');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initHandlers();
        this.initElements();
        this.initOnChange();
        this.handleProperties();
        // must be done after handlePlaceholder
        this.initSelectedOption();
        // must be done after handleProperties
        this.initMaterialSelect();
        // must be done after initMaterialSelect
        this.listenOptionChanges();
        this.initFilledIn();
        this.handleDOMEvents();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.renderer.invokeElementMethod(this.selectElement, 'material_select', ['destroy']);
        this.selectElement.off();
        this.mutationObserver.disconnect();
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            disabled: () => this.handleDisabled(),
            label: () => this.handleLabel(),
            placeholder: () => this.handlePlaceholder(),
        };
    }
    /**
     * @return {?}
     */
    initElements() {
        this.selectElement = $(this.elementRef.nativeElement);
        this.selectContainerElement = $(this.elementRef.nativeElement).parents('.input-field');
        this.labelElement = this.createLabelElement();
    }
    /**
     * Need to be done after material_select has been invoked or else the multi-select
     * options are not yet in the DOM as it loops on rendered options
     * @return {?}
     */
    initFilledIn() {
        this.checkboxElements = this.selectContainerElement.find(':checkbox');
        this.handlers['filledIn'] = () => this.handleFilledIn();
        this.handleFilledIn();
    }
    /**
     * @return {?}
     */
    initMaterialSelect() {
        this.renderer.invokeElementMethod(this.selectElement, 'material_select');
    }
    /**
     * Trigger the native change event from select element instead of the JQuery.
     * An issue on Github is open about this problem : https://github.com/Dogfalo/materialize/issues/2843
     * This method should be removed when this issue is revolved.
     * @return {?}
     */
    initOnChange() {
        this.selectElement.on('change', (event) => {
            if (!this.suspend) {
                this.suspend = true;
                const /** @type {?} */ customEvent = document.createEvent('CustomEvent');
                customEvent.initCustomEvent('change', true, false, event.target.value);
                this.renderer.invokeElementMethod(this.selectElement[0], 'dispatchEvent', [customEvent]);
            }
        });
        // Stop the propagation of change event
        this.selectElement[0].addEventListener('change', () => {
            this.suspend = false;
        });
    }
    /**
     * @return {?}
     */
    handleDOMEvents() {
        this.inputElement.on('blur focus', (event) => {
            const /** @type {?} */ customEvent = document.createEvent('CustomEvent');
            customEvent.initCustomEvent(event.type, true, false, event.target);
            this.selectElement[0].dispatchEvent(customEvent);
        });
    }
    /**
     * @return {?}
     */
    createLabelElement() {
        const /** @type {?} */ labelElement = document.createElement('label');
        labelElement.setAttribute('for', this.id);
        this.renderer.invokeElementMethod(this.selectElement, 'after', [labelElement]);
        return $(labelElement);
    }
    /**
     * @return {?}
     */
    handleProperties() {
        if (this.selectContainerElement.length === 0) {
            console.error('Select with mz-select directive must be place inside a [mz-select-container] tag', this.selectElement);
            return;
        }
        super.executePropHandlers();
    }
    /**
     * @return {?}
     */
    initSelectedOption() {
        const /** @type {?} */ firstOptionElement = this.selectElement.children().first();
        if (firstOptionElement.length > 0
            && this.selectElement.children('option[selected]').length === 0
            && !this.selectElement[0].hasAttribute('multiple')) {
            this.renderer.setElementAttribute(firstOptionElement[0], 'selected', '');
        }
    }
    /**
     * @return {?}
     */
    handleDisabled() {
        // when disabled is null/undefined that means the property has not been used on the element
        // but it might be set by another process (for example reactive form applies disabled attribute itself)
        // therefore we don't want to remove or add it here
        if (this.disabled != null) {
            this.renderer.setElementProperty(this.selectElement[0], 'disabled', !!this.disabled);
            this.updateMaterialSelect();
        }
    }
    /**
     * @return {?}
     */
    handleLabel() {
        if (this.label != null) {
            this.renderer.invokeElementMethod(this.labelElement, 'text', [this.label]);
        }
    }
    /**
     * @return {?}
     */
    handleFilledIn() {
        if (this.checkboxElements.length > 0) {
            this.checkboxElements.toArray().forEach(checkboxElement => {
                this.renderer.setElementClass(checkboxElement, 'filled-in', !!this.filledIn);
            });
        }
    }
    /**
     * @return {?}
     */
    handlePlaceholder() {
        const /** @type {?} */ placeholderElement = this.selectElement.children(':disabled').first();
        // if placeholder element exists
        if (placeholderElement.length > 0) {
            if (this.placeholder) {
                // update existing placeholder element
                this.renderer.invokeElementMethod(placeholderElement, 'text', [this.placeholder]);
            }
            else {
                // remove existing placeholder element
                this.renderer.invokeElementMethod(placeholderElement, 'remove');
                // Force trigger change event since it's not triggered when value change programmatically
                this.renderer.invokeElementMethod(this.selectElement, 'change');
                // Required if we don't want exception "Expression has changed after it was checked." https://github.com/angular/angular/issues/6005
                this.changeDetectorRef.detectChanges();
            }
        }
        else {
            if (this.placeholder) {
                // add placeholder element
                const /** @type {?} */ placeholderText = document.createTextNode(this.placeholder);
                const /** @type {?} */ placeholderOption = document.createElement('option');
                placeholderOption.disabled = true;
                placeholderOption.value = null;
                placeholderOption.appendChild(placeholderText);
                this.renderer.invokeElementMethod(this.selectElement, 'prepend', [placeholderOption]);
            }
        }
        this.initMaterialSelect();
    }
    /**
     * @return {?}
     */
    listenOptionChanges() {
        const /** @type {?} */ mutationObserverConfiguration = {
            childList: true,
            subtree: true,
        };
        this.mutationObserver = new MutationObserver((mutations) => {
            this.updateMaterialSelect();
        });
        this.mutationObserver.observe(this.selectElement[0], mutationObserverConfiguration);
    }
    /**
     * @return {?}
     */
    updateMaterialSelect() {
        this.initMaterialSelect();
        if (this.filledIn) {
            this.initFilledIn();
        }
        this.handleDOMEvents();
        // wait for materialize select to be initialized
        // /!\ race condition warning /!\
        setTimeout(() => this.update.emit());
    }
}
MzSelectDirective.ɵfac = function MzSelectDirective_Factory(t) { return new (t || MzSelectDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
MzSelectDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzSelectDirective, selectors: [["select", "mzSelect", ""], ["select", "mz-select", ""]], inputs: { id: "id", disabled: "disabled", placeholder: "placeholder", label: "label", filledIn: "filledIn" }, outputs: { update: "update" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/** @nocollapse */
MzSelectDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: ChangeDetectorRef, },
    { type: Renderer, },
];
MzSelectDirective.propDecorators = {
    "id": [{ type: Input },],
    "disabled": [{ type: Input },],
    "placeholder": [{ type: Input },],
    "label": [{ type: Input },],
    "filledIn": [{ type: Input },],
    "update": [{ type: Output },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzSelectDirective, [{
        type: Directive,
        args: [{
                selector: 'select[mzSelect], select[mz-select]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: Renderer }]; }, { update: [{
            type: Output
        }], id: [{
            type: Input
        }], disabled: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], label: [{
            type: Input
        }], filledIn: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSelectContainerComponent {
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initControlSubscription();
        this.initSelectSubscription();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeControlSubscription();
        this.removeSelectSubscription();
    }
    /**
     * @return {?}
     */
    initControlSubscription() {
        if (this.ngControl) {
            this.mzSelectDirective.disabled = this.ngControl.control.disabled;
            this.statusChangesSubscription = this.ngControl.control.statusChanges.subscribe((status) => {
                // to handle enabling/disabling formControl
                const /** @type {?} */ disabled = status === 'DISABLED';
                if (disabled !== this.mzSelectDirective.disabled) {
                    this.mzSelectDirective.disabled = disabled;
                    this.mzSelectDirective.handleDisabled();
                }
            });
            this.selectValueSubscription = this.ngControl.valueChanges.subscribe((value) => {
                // to synchronize input and select when value changes programmatically
                const /** @type {?} */ isDropdownOpen = this.mzSelectDirective.inputElement.hasClass('active');
                const /** @type {?} */ inputValue = this.mzSelectDirective.inputElement.val();
                const /** @type {?} */ options = this.mzSelectDirective.selectElement.children('option');
                const /** @type {?} */ selectedOptions = options.filter('option:selected').toArray();
                const /** @type {?} */ disabledOptions = options.filter(':disabled').toArray();
                const /** @type {?} */ selectedOptionText = selectedOptions.length === 0
                    ? disabledOptions.map(option => option.textContent)[0]
                    : selectedOptions.map(option => option.textContent).join(', ');
                if (inputValue !== selectedOptionText && !isDropdownOpen) {
                    this.mzSelectDirective.updateMaterialSelect();
                }
            });
        }
    }
    /**
     * @return {?}
     */
    initSelectSubscription() {
        if (this.mzSelectDirective) {
            this.mzSelectDirective.update
                .subscribe(() => this.registerOnBlur())
                .next();
        }
    }
    /**
     * @return {?}
     */
    registerOnBlur() {
        this.mzSelectDirective.inputElement.on('blur', () => {
            if (this.ngControl) {
                this.ngControl.control.markAsTouched();
            }
            if (this.mzValidationComponent) {
                this.mzValidationComponent.setValidationState();
            }
        });
    }
    /**
     * @return {?}
     */
    removeControlSubscription() {
        if (this.mzSelectDirective) {
            this.mzSelectDirective.update.unsubscribe();
            this.mzSelectDirective.inputElement.off();
        }
    }
    /**
     * @return {?}
     */
    removeSelectSubscription() {
        if (this.statusChangesSubscription) {
            this.statusChangesSubscription.unsubscribe();
        }
        if (this.selectValueSubscription) {
            this.selectValueSubscription.unsubscribe();
        }
    }
}
MzSelectContainerComponent.ɵfac = function MzSelectContainerComponent_Factory(t) { return new (t || MzSelectContainerComponent)(); };
MzSelectContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzSelectContainerComponent, selectors: [["mz-select-container"]], contentQueries: function MzSelectContainerComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, MzSelectDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, MzValidationComponent, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, NgControl, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.mzSelectDirective = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.mzValidationComponent = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ngControl = _t.first);
    } }, inputs: { inline: "inline" }, ngContentSelectors: _c5, decls: 2, vars: 2, consts: [[1, "input-field"]], template: function MzSelectContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("inline", ctx.inline);
    } }, styles: [".input-field[_ngcontent-%COMP%]:not(.inline){display:block}  .input-field .dropdown-content [type=checkbox]+label{top:-11px}"] });
/** @nocollapse */
MzSelectContainerComponent.propDecorators = {
    "inline": [{ type: Input },],
    "mzSelectDirective": [{ type: ContentChild, args: [MzSelectDirective,] },],
    "mzValidationComponent": [{ type: ContentChild, args: [MzValidationComponent,] },],
    "ngControl": [{ type: ContentChild, args: [NgControl,] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzSelectContainerComponent, [{
        type: Component,
        args: [{
                selector: 'mz-select-container',
                template: `<div
  class="input-field"
  [class.inline]="inline"
>
  <ng-content></ng-content>
</div>`,
                styles: [`.input-field:not(.inline){display:block}/deep/ .input-field .dropdown-content [type=checkbox]+label{top:-11px}`]
            }]
    }], null, { inline: [{
            type: Input
        }], mzSelectDirective: [{
            type: ContentChild,
            args: [MzSelectDirective]
        }], mzValidationComponent: [{
            type: ContentChild,
            args: [MzValidationComponent]
        }], ngControl: [{
            type: ContentChild,
            args: [NgControl]
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSelectModule {
}
MzSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzSelectModule });
MzSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzSelectModule_Factory(t) { return new (t || MzSelectModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzSelectModule, { declarations: [MzSelectDirective, MzSelectContainerComponent], exports: [MzSelectDirective, MzSelectContainerComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzSelectModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    MzSelectDirective,
                    MzSelectContainerComponent,
                ],
                exports: [
                    MzSelectDirective,
                    MzSelectContainerComponent,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSidenavCollapsibleHeaderComponent extends MzRemoveComponentHost {
}
MzSidenavCollapsibleHeaderComponent.ɵfac = function MzSidenavCollapsibleHeaderComponent_Factory(t) { return ɵMzSidenavCollapsibleHeaderComponent_BaseFactory(t || MzSidenavCollapsibleHeaderComponent); };
MzSidenavCollapsibleHeaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzSidenavCollapsibleHeaderComponent, selectors: [["mz-sidenav-collapsible-header"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c5, decls: 2, vars: 0, consts: [[1, "collapsible-header", "waves-effect"]], template: function MzSidenavCollapsibleHeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "a", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } }, styles: [""] });
const ɵMzSidenavCollapsibleHeaderComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MzSidenavCollapsibleHeaderComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzSidenavCollapsibleHeaderComponent, [{
        type: Component,
        args: [{
                selector: 'mz-sidenav-collapsible-header',
                template: `<a class="collapsible-header waves-effect"><ng-content></ng-content></a>`,
                styles: [``]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSidenavCollapsibleComponent {
    /**
     * @param {?} changeDetectorRef
     * @param {?} renderer
     */
    constructor(changeDetectorRef, renderer) {
        this.changeDetectorRef = changeDetectorRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initCollapsible();
    }
    /**
     * @return {?}
     */
    initCollapsible() {
        const /** @type {?} */ options = {
            accordion: false,
            onClose: this.onClose,
            onOpen: this.onOpen,
        };
        // need setTimeout otherwise loading directly on the page cause an error
        setTimeout(() => this.renderer.invokeElementMethod($(this.collapsible.nativeElement), 'collapsible', [options]));
        this.changeDetectorRef.detectChanges();
    }
}
MzSidenavCollapsibleComponent.ɵfac = function MzSidenavCollapsibleComponent_Factory(t) { return new (t || MzSidenavCollapsibleComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
MzSidenavCollapsibleComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzSidenavCollapsibleComponent, selectors: [["mz-sidenav-collapsible"]], contentQueries: function MzSidenavCollapsibleComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, MzSidenavCollapsibleHeaderComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.header = _t.first);
    } }, viewQuery: function MzSidenavCollapsibleComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c8, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.collapsible = _t.first);
    } }, inputs: { onClose: "onClose", onOpen: "onOpen" }, ngContentSelectors: _c15, decls: 8, vars: 0, consts: [[1, "collapsible", "collapsible-accordion"], ["collapsible", ""], [1, "collapsible-body"]], template: function MzSidenavCollapsibleComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c14);
        ɵngcc0.ɵɵelementStart(0, "li");
        ɵngcc0.ɵɵelementStart(1, "ul", 0, 1);
        ɵngcc0.ɵɵelementStart(3, "li");
        ɵngcc0.ɵɵprojection(4);
        ɵngcc0.ɵɵelementStart(5, "div", 2);
        ɵngcc0.ɵɵelementStart(6, "ul");
        ɵngcc0.ɵɵprojection(7, 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } }, styles: ["[_nghost-%COMP%]     .collapsible-header{padding:0 32px}[_nghost-%COMP%]     .collapsible-header i{color:rgba(0,0,0,.54)}[_nghost-%COMP%]     .collapsible-body li a{font-weight:initial}"] });
/** @nocollapse */
MzSidenavCollapsibleComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
    { type: Renderer, },
];
MzSidenavCollapsibleComponent.propDecorators = {
    "onClose": [{ type: Input },],
    "onOpen": [{ type: Input },],
    "collapsible": [{ type: ViewChild, args: ['collapsible',] },],
    "header": [{ type: ContentChild, args: [MzSidenavCollapsibleHeaderComponent,] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzSidenavCollapsibleComponent, [{
        type: Component,
        args: [{
                selector: 'mz-sidenav-collapsible',
                template: `<li>
  <ul #collapsible class="collapsible collapsible-accordion">
    <li>
      <ng-content select="mz-sidenav-collapsible-header"></ng-content>
      <div class="collapsible-body">
        <ul>
          <ng-content select="mz-sidenav-collapsible-content"></ng-content>
        </ul>
      </div>
    </li>
  </ul>
</li>`,
                styles: [`:host /deep/ .collapsible-header{padding:0 32px}:host /deep/ .collapsible-header i{color:rgba(0,0,0,.54)}:host /deep/ .collapsible-body li a{font-weight:initial}`]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: Renderer }]; }, { onClose: [{
            type: Input
        }], onOpen: [{
            type: Input
        }], collapsible: [{
            type: ViewChild,
            args: ['collapsible']
        }], header: [{
            type: ContentChild,
            args: [MzSidenavCollapsibleHeaderComponent]
        }] }); })();
class MzSidenavCollapsibleContentDirective {
}
MzSidenavCollapsibleContentDirective.ɵfac = function MzSidenavCollapsibleContentDirective_Factory(t) { return new (t || MzSidenavCollapsibleContentDirective)(); };
MzSidenavCollapsibleContentDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzSidenavCollapsibleContentDirective, selectors: [["mz-sidenav-collapsible-content"]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzSidenavCollapsibleContentDirective, [{
        type: Directive,
        args: [{ selector: 'mz-sidenav-collapsible-content' }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSidenavDividerComponent {
}
MzSidenavDividerComponent.ɵfac = function MzSidenavDividerComponent_Factory(t) { return new (t || MzSidenavDividerComponent)(); };
MzSidenavDividerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzSidenavDividerComponent, selectors: [["mz-sidenav-divider"]], decls: 2, vars: 0, consts: [[1, "divider"]], template: function MzSidenavDividerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "li");
        ɵngcc0.ɵɵelement(1, "div", 0);
        ɵngcc0.ɵɵelementEnd();
    } }, styles: [".divider[_ngcontent-%COMP%]{margin-bottom:8px}"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzSidenavDividerComponent, [{
        type: Component,
        args: [{
                selector: 'mz-sidenav-divider',
                template: `<li>
  <div class="divider"></div>
</li>`,
                styles: [`.divider{margin-bottom:8px}`]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSidenavHeaderComponent {
}
MzSidenavHeaderComponent.ɵfac = function MzSidenavHeaderComponent_Factory(t) { return new (t || MzSidenavHeaderComponent)(); };
MzSidenavHeaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzSidenavHeaderComponent, selectors: [["mz-sidenav-header"]], ngContentSelectors: _c5, decls: 2, vars: 0, consts: [[1, "sidenav-header"]], template: function MzSidenavHeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "li", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } }, styles: [".sidenav-header[_ngcontent-%COMP%]{margin-bottom:8px}"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzSidenavHeaderComponent, [{
        type: Component,
        args: [{
                selector: 'mz-sidenav-header',
                template: `<li class="sidenav-header">
  <ng-content></ng-content>
</li>`,
                styles: [`.sidenav-header{margin-bottom:8px}`]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSidenavLinkComponent {
}
MzSidenavLinkComponent.ɵfac = function MzSidenavLinkComponent_Factory(t) { return new (t || MzSidenavLinkComponent)(); };
MzSidenavLinkComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzSidenavLinkComponent, selectors: [["mz-sidenav-link"]], inputs: { active: "active" }, ngContentSelectors: _c5, decls: 2, vars: 2, template: function MzSidenavLinkComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "li");
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("active", ctx.active);
    } }, styles: ["[_nghost-%COMP%]     a[class*=mdi-]::before{color:rgba(0,0,0,.54);margin:-1px 32px 0 0;vertical-align:middle}[_nghost-%COMP%]     a i, [_nghost-%COMP%]     a i.material-icons, [_nghost-%COMP%]     a i[class*=mdi-]{margin-top:-1px}[_nghost-%COMP%]     a i.material-icons::before, [_nghost-%COMP%]     a i::before, [_nghost-%COMP%]     a i[class*=mdi-]::before{vertical-align:middle}"] });
/** @nocollapse */
MzSidenavLinkComponent.propDecorators = {
    "active": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzSidenavLinkComponent, [{
        type: Component,
        args: [{
                selector: 'mz-sidenav-link',
                template: `<li
  [class.active]="active"
>
  <ng-content></ng-content>
</li>
`,
                styles: [`:host /deep/ a[class*=mdi-]::before{color:rgba(0,0,0,.54);margin:-1px 32px 0 0;vertical-align:middle}:host /deep/ a i,:host /deep/ a i.material-icons,:host /deep/ a i[class*=mdi-]{margin-top:-1px}:host /deep/ a i.material-icons::before,:host /deep/ a i::before,:host /deep/ a i[class*=mdi-]::before{vertical-align:middle}`],
                encapsulation: ViewEncapsulation.Emulated
            }]
    }], null, { active: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSidenavSubheaderComponent {
}
MzSidenavSubheaderComponent.ɵfac = function MzSidenavSubheaderComponent_Factory(t) { return new (t || MzSidenavSubheaderComponent)(); };
MzSidenavSubheaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzSidenavSubheaderComponent, selectors: [["mz-sidenav-subheader"]], ngContentSelectors: _c5, decls: 3, vars: 0, consts: [[1, "subheader"]], template: function MzSidenavSubheaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "li");
        ɵngcc0.ɵɵelementStart(1, "a", 0);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } }, styles: [""] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzSidenavSubheaderComponent, [{
        type: Component,
        args: [{
                selector: 'mz-sidenav-subheader',
                template: `<li>
  <a class="subheader">
    <ng-content></ng-content>
  </a>
</li>`,
                styles: [``]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSidenavComponent {
    constructor() {
        this._opened = false;
    }
    /**
     * @return {?}
     */
    get opened() { return this._opened; }
    /**
     * @param {?} value
     * @return {?}
     */
    set opened(value) {
        this._opened = value;
        this.collapseButton.sideNav(this._opened ? 'show' : 'hide');
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initCollapseButton();
        this.initCollapsibleLinks();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.collapseButton.sideNav('destroy');
    }
    /**
     * @return {?}
     */
    initCollapseButton() {
        // fake button if no collapseButtonId is provided
        this.collapseButton = this.collapseButtonId
            ? $(`#${this.collapseButtonId}`)
            : $(document.createElement('template'));
        // add data-activates to collapse button
        this.collapseButton.attr('data-activates', this.id);
        // extend onOpen function to update opened state
        const /** @type {?} */ onOpen = this.onOpen || (() => { });
        this.onOpen = () => {
            onOpen();
            this._opened = true;
        };
        // extend onClose function to update opened state
        const /** @type {?} */ onClose = this.onClose || (() => { });
        this.onClose = () => {
            onClose();
            this._opened = false;
        };
        // initialize sidenav
        this.collapseButton.sideNav({
            closeOnClick: this.closeOnClick || false,
            draggable: this.draggable != null ? this.draggable : true,
            edge: this.edge || 'left',
            menuWidth: isNaN(this.width) ? 300 : this.width,
            onClose: this.onClose,
            onOpen: this.onOpen,
        });
    }
    /**
     * @return {?}
     */
    initCollapsibleLinks() {
        // initialize collapsible elements
        $(`#${this.id} .collapsible`).collapsible();
    }
}
MzSidenavComponent.ɵfac = function MzSidenavComponent_Factory(t) { return new (t || MzSidenavComponent)(); };
MzSidenavComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzSidenavComponent, selectors: [["mz-sidenav"]], inputs: { onOpen: "onOpen", onClose: "onClose", backgroundClass: "backgroundClass", closeOnClick: "closeOnClick", collapseButtonId: "collapseButtonId", draggable: "draggable", edge: "edge", fixed: "fixed", id: "id", width: "width" }, ngContentSelectors: _c5, decls: 2, vars: 6, template: function MzSidenavComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "ul");
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("side-nav ", ctx.backgroundClass, "");
        ɵngcc0.ɵɵclassProp("fixed", ctx.fixed);
        ɵngcc0.ɵɵattribute("id", ctx.id);
    } }, encapsulation: 2 });
/** @nocollapse */
MzSidenavComponent.propDecorators = {
    "backgroundClass": [{ type: Input },],
    "closeOnClick": [{ type: Input },],
    "collapseButtonId": [{ type: Input },],
    "draggable": [{ type: Input },],
    "edge": [{ type: Input },],
    "fixed": [{ type: Input },],
    "id": [{ type: Input },],
    "onClose": [{ type: Input },],
    "onOpen": [{ type: Input },],
    "width": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzSidenavComponent, [{
        type: Component,
        args: [{
                selector: 'mz-sidenav',
                template: `<ul class="side-nav {{ backgroundClass }}"
  [attr.id]="id"
  [class.fixed]="fixed">
  <ng-content></ng-content>
</ul>`
            }]
    }], function () { return []; }, { onOpen: [{
            type: Input
        }], onClose: [{
            type: Input
        }], backgroundClass: [{
            type: Input
        }], closeOnClick: [{
            type: Input
        }], collapseButtonId: [{
            type: Input
        }], draggable: [{
            type: Input
        }], edge: [{
            type: Input
        }], fixed: [{
            type: Input
        }], id: [{
            type: Input
        }], width: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSidenavModule {
}
MzSidenavModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzSidenavModule });
MzSidenavModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzSidenavModule_Factory(t) { return new (t || MzSidenavModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzSidenavModule, { declarations: [MzSidenavCollapsibleComponent, MzSidenavCollapsibleContentDirective, MzSidenavCollapsibleHeaderComponent, MzSidenavComponent, MzSidenavDividerComponent, MzSidenavHeaderComponent, MzSidenavLinkComponent, MzSidenavSubheaderComponent], exports: [MzSidenavCollapsibleComponent, MzSidenavCollapsibleContentDirective, MzSidenavCollapsibleHeaderComponent, MzSidenavComponent, MzSidenavDividerComponent, MzSidenavHeaderComponent, MzSidenavLinkComponent, MzSidenavSubheaderComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzSidenavModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    MzSidenavCollapsibleComponent,
                    MzSidenavCollapsibleContentDirective,
                    MzSidenavCollapsibleHeaderComponent,
                    MzSidenavComponent,
                    MzSidenavDividerComponent,
                    MzSidenavHeaderComponent,
                    MzSidenavLinkComponent,
                    MzSidenavSubheaderComponent,
                ],
                exports: [
                    MzSidenavCollapsibleComponent,
                    MzSidenavCollapsibleContentDirective,
                    MzSidenavCollapsibleHeaderComponent,
                    MzSidenavComponent,
                    MzSidenavDividerComponent,
                    MzSidenavHeaderComponent,
                    MzSidenavLinkComponent,
                    MzSidenavSubheaderComponent,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSpinnerComponent {
}
MzSpinnerComponent.ɵfac = function MzSpinnerComponent_Factory(t) { return new (t || MzSpinnerComponent)(); };
MzSpinnerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzSpinnerComponent, selectors: [["mz-spinner"]], inputs: { color: "color", size: "size" }, decls: 8, vars: 11, consts: [[1, "spinner-layer"], [1, "circle-clipper", "left"], [1, "circle"], [1, "gap-patch"], [1, "circle-clipper", "right"]], template: function MzSpinnerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "div", 0);
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵelement(3, "div", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 3);
        ɵngcc0.ɵɵelement(5, "div", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 4);
        ɵngcc0.ɵɵelement(7, "div", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("preloader-wrapper active ", ctx.size, "");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("spinner-red-only", ctx.color === "red")("spinner-green-only", ctx.color === "green")("spinner-blue-only", ctx.color === "blue")("spinner-yellow-only", ctx.color === "yellow");
    } }, styles: [""] });
/** @nocollapse */
MzSpinnerComponent.propDecorators = {
    "color": [{ type: Input },],
    "size": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzSpinnerComponent, [{
        type: Component,
        args: [{
                selector: 'mz-spinner',
                template: ` <div class="preloader-wrapper active {{ size }}">

    <div
      class="spinner-layer"
      [class.spinner-red-only]="color === 'red'"
      [class.spinner-green-only]="color === 'green'"
      [class.spinner-blue-only]="color === 'blue'"
      [class.spinner-yellow-only]="color === 'yellow'">

      <div class="circle-clipper left">
        <div class="circle"></div>
      </div>

      <div class="gap-patch">
        <div class="circle"></div>
      </div>

      <div class="circle-clipper right">
        <div class="circle"></div>
      </div>
    </div>
  </div>`,
                styles: [``]
            }]
    }], null, { color: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSpinnerModule {
}
MzSpinnerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzSpinnerModule });
MzSpinnerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzSpinnerModule_Factory(t) { return new (t || MzSpinnerModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzSpinnerModule, { declarations: [MzSpinnerComponent], exports: [MzSpinnerComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzSpinnerModule, [{
        type: NgModule,
        args: [{
                declarations: [MzSpinnerComponent],
                exports: [MzSpinnerComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSwitchDirective {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initElements();
        this.handleInputType();
    }
    /**
     * @return {?}
     */
    initElements() {
        this.switchElement = $(this.elementRef.nativeElement);
        this.switchContainerElement = $(this.elementRef.nativeElement).parent('label').parent('.switch');
        if (this.switchContainerElement.length === 0) {
            console.error('Input with mz-switch directive must be placed inside an [mz-switch-container] tag', this.switchElement);
            return;
        }
    }
    /**
     * @return {?}
     */
    handleInputType() {
        const /** @type {?} */ type = this.switchElement.attr('type');
        if (type !== 'checkbox') {
            this.renderer.setElementAttribute(this.switchElement[0], 'type', 'checkbox');
        }
    }
}
MzSwitchDirective.ɵfac = function MzSwitchDirective_Factory(t) { return new (t || MzSwitchDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
MzSwitchDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzSwitchDirective, selectors: [["", "mzSwitch", ""], ["", "mz-switch", ""]], inputs: { off: "off", on: "on" } });
/** @nocollapse */
MzSwitchDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];
MzSwitchDirective.propDecorators = {
    "off": [{ type: Input },],
    "on": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzSwitchDirective, [{
        type: Directive,
        args: [{
                selector: '[mzSwitch], [mz-switch]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: Renderer }]; }, { off: [{
            type: Input
        }], on: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSwitchContainerComponent {
}
MzSwitchContainerComponent.ɵfac = function MzSwitchContainerComponent_Factory(t) { return new (t || MzSwitchContainerComponent)(); };
MzSwitchContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzSwitchContainerComponent, selectors: [["mz-switch-container"]], contentQueries: function MzSwitchContainerComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, MzSwitchDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.mzSwitchDirective = _t.first);
    } }, ngContentSelectors: _c5, decls: 8, vars: 2, consts: [[1, "switch"], [1, "off"], [1, "lever"], [1, "on"]], template: function MzSwitchContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "label");
        ɵngcc0.ɵɵelementStart(2, "span", 1);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵprojection(4);
        ɵngcc0.ɵɵelement(5, "span", 2);
        ɵngcc0.ɵɵelementStart(6, "span", 3);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ctx.mzSwitchDirective == null ? null : ctx.mzSwitchDirective.off);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ctx.mzSwitchDirective == null ? null : ctx.mzSwitchDirective.on);
    } }, styles: [""] });
/** @nocollapse */
MzSwitchContainerComponent.propDecorators = {
    "mzSwitchDirective": [{ type: ContentChild, args: [MzSwitchDirective,] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzSwitchContainerComponent, [{
        type: Component,
        args: [{
                selector: 'mz-switch-container',
                template: `<div class="switch">
  <label>
    <span class="off">{{ mzSwitchDirective?.off }}</span>
    <ng-content></ng-content>
    <span class="lever"></span>
    <span class="on">{{ mzSwitchDirective?.on }}</span>
  </label>
</div>`,
                styles: [``]
            }]
    }], null, { mzSwitchDirective: [{
            type: ContentChild,
            args: [MzSwitchDirective]
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzSwitchModule {
}
MzSwitchModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzSwitchModule });
MzSwitchModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzSwitchModule_Factory(t) { return new (t || MzSwitchModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzSwitchModule, { declarations: [MzSwitchDirective, MzSwitchContainerComponent], exports: [MzSwitchDirective, MzSwitchContainerComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzSwitchModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    MzSwitchDirective,
                    MzSwitchContainerComponent,
                ],
                exports: [
                    MzSwitchDirective,
                    MzSwitchContainerComponent,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTabItemComponent {
    /**
     * @return {?}
     */
    get link() {
        return this.tabItemId ? this.tabItemId : this.label.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();
    }
}
MzTabItemComponent.ɵfac = function MzTabItemComponent_Factory(t) { return new (t || MzTabItemComponent)(); };
MzTabItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzTabItemComponent, selectors: [["mz-tab-item"]], inputs: { active: "active", class: "class", disabled: "disabled", href: "href", label: "label", tabItemId: "tabItemId", target: "target" }, ngContentSelectors: _c5, decls: 2, vars: 4, consts: [[3, "id"]], template: function MzTabItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.class);
        ɵngcc0.ɵɵpropertyInterpolate("id", ctx.link);
    } }, styles: [""] });
/** @nocollapse */
MzTabItemComponent.propDecorators = {
    "active": [{ type: Input },],
    "class": [{ type: Input },],
    "disabled": [{ type: Input },],
    "href": [{ type: Input },],
    "label": [{ type: Input },],
    "tabItemId": [{ type: Input },],
    "target": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzTabItemComponent, [{
        type: Component,
        args: [{
                selector: 'mz-tab-item',
                template: `<div id="{{ link }}" class="{{ class }}">
  <ng-content></ng-content>
</div>`,
                styles: [``]
            }]
    }], null, { active: [{
            type: Input
        }], class: [{
            type: Input
        }], disabled: [{
            type: Input
        }], href: [{
            type: Input
        }], label: [{
            type: Input
        }], tabItemId: [{
            type: Input
        }], target: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTabComponent {
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initTabs();
    }
    /**
     * @return {?}
     */
    initTabs() {
        const /** @type {?} */ options = {
            onShow: this.onShow,
            responsiveThreshold: this.responsiveThreshold,
            swipeable: this.swipeable,
        };
        $(this.tabs.nativeElement).tabs(options);
    }
    /**
     * @param {?} tabItemId
     * @return {?}
     */
    selectTab(tabItemId) {
        $(this.tabs.nativeElement).tabs('select_tab', tabItemId);
    }
}
MzTabComponent.ɵfac = function MzTabComponent_Factory(t) { return new (t || MzTabComponent)(); };
MzTabComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzTabComponent, selectors: [["mz-tab"]], contentQueries: function MzTabComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, MzTabItemComponent, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tabItems = _t);
    } }, viewQuery: function MzTabComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c16, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tabs = _t.first);
    } }, inputs: { fixedTabWidth: "fixedTabWidth", onShow: "onShow", responsiveThreshold: "responsiveThreshold", swipeable: "swipeable" }, ngContentSelectors: _c18, decls: 5, vars: 3, consts: [[1, "tabs"], ["tabs", ""], ["class", "tab", 3, "disabled", 4, "ngFor", "ngForOf"], [1, "tab"], [3, "href", "target"]], template: function MzTabComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c17);
        ɵngcc0.ɵɵelementStart(0, "ul", 0, 1);
        ɵngcc0.ɵɵtemplate(2, MzTabComponent_li_2_Template, 3, 7, "li", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div");
        ɵngcc0.ɵɵprojection(4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("tabs-fixed-width", ctx.fixedTabWidth);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.tabItems.toArray());
    } }, directives: [ɵngcc1.NgForOf], styles: [""] });
/** @nocollapse */
MzTabComponent.propDecorators = {
    "fixedTabWidth": [{ type: Input },],
    "onShow": [{ type: Input },],
    "responsiveThreshold": [{ type: Input },],
    "swipeable": [{ type: Input },],
    "tabs": [{ type: ViewChild, args: ['tabs',] },],
    "tabItems": [{ type: ContentChildren, args: [MzTabItemComponent,] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzTabComponent, [{
        type: Component,
        args: [{
                selector: 'mz-tab',
                template: `<ul #tabs
  class="tabs"
  [class.tabs-fixed-width]="fixedTabWidth">
  <li class="tab" [class.disabled]="tabItem.disabled" *ngFor="let tabItem of tabItems.toArray()">
    <a [class.active]="tabItem.active"
      href="{{ tabItem.href ? tabItem.href : '#' + tabItem.link }}" target="{{ tabItem.target }}">
      {{ tabItem.label }}
    </a>
  </li>
</ul>
<div>
  <ng-content select="mz-tab-item"></ng-content>
</div>`,
                styles: [``]
            }]
    }], null, { fixedTabWidth: [{
            type: Input
        }], onShow: [{
            type: Input
        }], responsiveThreshold: [{
            type: Input
        }], swipeable: [{
            type: Input
        }], tabs: [{
            type: ViewChild,
            args: ['tabs']
        }], tabItems: [{
            type: ContentChildren,
            args: [MzTabItemComponent]
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTabModule {
}
MzTabModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzTabModule });
MzTabModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzTabModule_Factory(t) { return new (t || MzTabModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzTabModule, { declarations: function () { return [MzTabComponent, MzTabItemComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [MzTabComponent, MzTabItemComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzTabModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [
                    MzTabComponent,
                    MzTabItemComponent,
                ],
                exports: [
                    MzTabComponent,
                    MzTabItemComponent,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTextareaContainerComponent {
}
MzTextareaContainerComponent.ɵfac = function MzTextareaContainerComponent_Factory(t) { return new (t || MzTextareaContainerComponent)(); };
MzTextareaContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzTextareaContainerComponent, selectors: [["mz-textarea-container"]], inputs: { inline: "inline" }, ngContentSelectors: _c5, decls: 2, vars: 2, consts: [[1, "input-field"]], template: function MzTextareaContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("inline", ctx.inline);
    } }, styles: ["[_nghost-%COMP%]     textarea{display:block}.input-field[_ngcontent-%COMP%]:not(.inline){display:block}"] });
/** @nocollapse */
MzTextareaContainerComponent.propDecorators = {
    "inline": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzTextareaContainerComponent, [{
        type: Component,
        args: [{
                selector: 'mz-textarea-container',
                template: `<div
  class="input-field"
  [class.inline]="inline"
>
  <ng-content></ng-content>
</div>`,
                styles: [`:host /deep/ textarea{display:block}.input-field:not(.inline){display:block}`]
            }]
    }], null, { inline: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTextareaPrefixDirective {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'prefix', true);
    }
}
MzTextareaPrefixDirective.ɵfac = function MzTextareaPrefixDirective_Factory(t) { return new (t || MzTextareaPrefixDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
MzTextareaPrefixDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzTextareaPrefixDirective, selectors: [["i", "mzTextareaPrefix", ""], ["i", "mz-textarea-prefix", ""]] });
/** @nocollapse */
MzTextareaPrefixDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzTextareaPrefixDirective, [{
        type: Directive,
        args: [{
                selector: 'i[mzTextareaPrefix], i[mz-textarea-prefix]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: Renderer }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTextareaDirective extends HandlePropChanges {
    /**
     * @param {?} ngControl
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(ngControl, elementRef, renderer) {
        super();
        this.ngControl = ngControl;
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initHandlers();
        this.initElements();
        this.initTextareaSubscription();
        this.handleProperties();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.textareaValueSubscription) {
            this.textareaValueSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            label: () => this.handleLabel(),
            length: () => this.handleLength(),
            placeholder: () => this.handlePlaceholder(),
        };
    }
    /**
     * @return {?}
     */
    initElements() {
        this.textareaElement = $(this.elementRef.nativeElement);
        this.textareaContainerElement = $(this.elementRef.nativeElement).parent('.input-field');
        this.labelElement = this.createLabelElement();
        this.initTextarea();
    }
    /**
     * @return {?}
     */
    initTextarea() {
        this.renderer.setElementClass(this.textareaElement[0], 'materialize-textarea', true);
    }
    /**
     * @return {?}
     */
    initTextareaSubscription() {
        if (this.ngControl) {
            this.textareaValueSubscription = this.ngControl.valueChanges.subscribe(() => this.setLabelActive());
        }
    }
    /**
     * @return {?}
     */
    createLabelElement() {
        const /** @type {?} */ labelElement = document.createElement('label');
        labelElement.setAttribute('for', this.id);
        this.renderer.invokeElementMethod(this.textareaElement, 'after', [labelElement]);
        return $(labelElement);
    }
    /**
     * @return {?}
     */
    handleProperties() {
        if (this.textareaContainerElement.length === 0) {
            console.error('Textarea must be placed inside a [mz-textarea-container] tag', this.textareaElement);
            return;
        }
        super.executePropHandlers();
    }
    /**
     * @return {?}
     */
    handleLabel() {
        if (this.placeholder || this.textareaElement.val()) {
            this.renderer.setElementClass(this.labelElement[0], 'active', true);
        }
        this.renderer.invokeElementMethod(this.labelElement, 'text', [this.label]);
    }
    /**
     * @return {?}
     */
    handleLength() {
        const /** @type {?} */ length = this.length ? this.length.toString() : null;
        this.renderer.setElementAttribute(this.textareaElement[0], 'data-length', length);
        if (length) {
            this.setCharacterCount();
        }
        else {
            this.removeCharacterCount();
        }
    }
    /**
     * @return {?}
     */
    handlePlaceholder() {
        const /** @type {?} */ placeholder = !!this.placeholder ? this.placeholder : null;
        this.renderer.setElementAttribute(this.textareaElement[0], 'placeholder', placeholder);
        this.setLabelActive();
    }
    /**
     * @return {?}
     */
    setCharacterCount() {
        this.renderer.invokeElementMethod(this.textareaElement, 'characterCounter');
        // force validation
        // need setTimeout otherwise it wont trigger validation right away
        setTimeout(() => {
            this.renderer.invokeElementMethod(this.textareaElement, 'trigger', ['input']);
            this.renderer.invokeElementMethod(this.textareaElement, 'trigger', ['blur']);
        });
    }
    /**
     * @return {?}
     */
    setLabelActive() {
        // need setTimeout otherwise it wont make label float in some circonstances
        // for example: forcing validation for example, reseting form programmaticaly, ...
        setTimeout(() => {
            const /** @type {?} */ textareaValue = (/** @type {?} */ (this.textareaElement[0])).value;
            const /** @type {?} */ isActive = !!this.placeholder || !!textareaValue;
            this.renderer.setElementClass(this.labelElement[0], 'active', isActive);
        });
    }
    /**
     * @return {?}
     */
    removeCharacterCount() {
        this.renderer.invokeElementMethod(this.textareaElement.siblings('.character-counter'), 'remove');
        this.removeValidationClasses();
    }
    /**
     * @return {?}
     */
    removeValidationClasses() {
        // reset valid/invalid state
        this.renderer.setElementClass(this.textareaElement[0], 'invalid', false);
        this.renderer.setElementClass(this.textareaElement[0], 'valid', false);
    }
}
MzTextareaDirective.ɵfac = function MzTextareaDirective_Factory(t) { return new (t || MzTextareaDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
MzTextareaDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzTextareaDirective, selectors: [["textarea", "mzTextarea", ""], ["textarea", "mz-textarea", ""]], inputs: { id: "id", placeholder: "placeholder", label: "label", length: "length" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/** @nocollapse */
MzTextareaDirective.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional },] },
    { type: ElementRef, },
    { type: Renderer, },
];
MzTextareaDirective.propDecorators = {
    "id": [{ type: Input },],
    "placeholder": [{ type: Input },],
    "label": [{ type: Input },],
    "length": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzTextareaDirective, [{
        type: Directive,
        args: [{
                selector: 'textarea[mzTextarea], textarea[mz-textarea]'
            }]
    }], function () { return [{ type: ɵngcc2.NgControl, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.ElementRef }, { type: Renderer }]; }, { id: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], label: [{
            type: Input
        }], length: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTextareaModule {
}
MzTextareaModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzTextareaModule });
MzTextareaModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzTextareaModule_Factory(t) { return new (t || MzTextareaModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzTextareaModule, { declarations: [MzTextareaContainerComponent, MzTextareaDirective, MzTextareaPrefixDirective], exports: [MzTextareaContainerComponent, MzTextareaDirective, MzTextareaPrefixDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzTextareaModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    MzTextareaContainerComponent,
                    MzTextareaDirective,
                    MzTextareaPrefixDirective,
                ],
                exports: [
                    MzTextareaContainerComponent,
                    MzTextareaDirective,
                    MzTextareaPrefixDirective,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTimepickerContainerComponent {
}
MzTimepickerContainerComponent.ɵfac = function MzTimepickerContainerComponent_Factory(t) { return new (t || MzTimepickerContainerComponent)(); };
MzTimepickerContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MzTimepickerContainerComponent, selectors: [["mz-timepicker-container"]], inputs: { inline: "inline" }, ngContentSelectors: _c5, decls: 2, vars: 2, consts: [[1, "input-field"]], template: function MzTimepickerContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("inline", ctx.inline);
    } }, styles: [""] });
/** @nocollapse */
MzTimepickerContainerComponent.propDecorators = {
    "inline": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzTimepickerContainerComponent, [{
        type: Component,
        args: [{
                selector: 'mz-timepicker-container',
                template: `<div
  class="input-field"
  [class.inline]="inline"
>
  <ng-content></ng-content>
</div>`,
                styles: [``]
            }]
    }], null, { inline: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTimepickerDirective extends HandlePropChanges {
    /**
     * @param {?} ngControl
     * @param {?} changeDetectorRef
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} zone
     */
    constructor(ngControl, changeDetectorRef, elementRef, renderer, zone) {
        super();
        this.ngControl = ngControl;
        this.changeDetectorRef = changeDetectorRef;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.zone = zone;
        // materialize uses ClockPicker to create the timepicker
        // complete list of options is available at the following address
        // https://github.com/weareoutman/clockpicker#options
        this.options = {};
        this.stopChangePropagation = false;
    }
    /**
     * @return {?}
     */
    get clockpicker() {
        return $('.clockpicker');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initHandlers();
        this.initElements();
        this.initTimepicker();
        this.handleProperties();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // remove event handlers
        this.inputElement.off();
        // remove clockpicker added to body by default
        this.clockpicker.remove();
    }
    /**
     * @return {?}
     */
    initHandlers() {
        this.handlers = {
            label: () => this.handleLabel(),
            placeholder: () => this.handlePlaceholder(),
        };
    }
    /**
     * @return {?}
     */
    initElements() {
        this.inputContainerElement = /** @type {?} */ ($(this.elementRef.nativeElement).parent('.input-field'));
        this.inputElement = /** @type {?} */ ($(this.elementRef.nativeElement));
        this.labelElement = /** @type {?} */ (this.createLabelElement());
    }
    /**
     * @return {?}
     */
    initTimepicker() {
        // append clockpicker to body by default
        if (!this.options.container) {
            this.options.container = 'body';
        }
        // extend afterHide callback to set label active
        const /** @type {?} */ afterHide = this.options && this.options.afterHide || (() => { });
        this.options = Object.assign({}, this.options, {
            afterHide: () => {
                afterHide();
                this.setLabelActive();
            },
        });
        this.renderer.invokeElementMethod(this.inputElement, 'pickatime', [this.options]);
        if (this.ngControl) {
            // set ngControl value according to selected time in timepicker
            this.inputElement.on('change', (event) => {
                this.ngControl.control.setValue(event.target.value);
                // mark for change detection
                // fix form validation with ChangeDetectionStrategy.OnPush
                this.changeDetectorRef.markForCheck();
            });
        }
    }
    /**
     * @return {?}
     */
    createLabelElement() {
        const /** @type {?} */ labelElement = document.createElement('label');
        labelElement.setAttribute('for', this.id);
        this.renderer.invokeElementMethod(this.inputElement, 'after', [labelElement]);
        return $(labelElement);
    }
    /**
     * @return {?}
     */
    handleProperties() {
        if (this.inputContainerElement.length === 0) {
            console.error('Input with mz-timepicker directive must be placed inside an [mz-timepicker-container] tag', this.inputElement);
            return;
        }
        super.executePropHandlers();
    }
    /**
     * @return {?}
     */
    handleLabel() {
        this.renderer.invokeElementMethod(this.labelElement, 'text', [this.label]);
    }
    /**
     * @return {?}
     */
    handlePlaceholder() {
        const /** @type {?} */ placeholder = !!this.placeholder ? this.placeholder : null;
        this.renderer.setElementAttribute(this.inputElement[0], 'placeholder', placeholder);
        // fix issue in IE where having a placeholder on input make control dirty and trigger validation
        // on page load... note that it still trigger validation on focus and would need a better fix
        // issue : https://github.com/angular/angular/issues/15299
        // workaround : https://stackoverflow.com/a/44967245/5583283
        if (this.ngControl) {
            this.zone.runOutsideAngular(() => {
                setTimeout(() => this.ngControl.control.markAsPristine());
            });
        }
        this.setLabelActive();
    }
    /**
     * @return {?}
     */
    setLabelActive() {
        // need wait for zone to be stable otherwise it wont make label
        // float in some circonstances (clearing value programmatically for example)
        this.zone.onStable
            .pipe(first())
            .subscribe(() => {
            const /** @type {?} */ inputValue = this.inputElement[0].value;
            const /** @type {?} */ isActive = !!this.placeholder || !!inputValue;
            this.renderer.setElementClass(this.labelElement[0], 'active', isActive);
        });
    }
}
MzTimepickerDirective.ɵfac = function MzTimepickerDirective_Factory(t) { return new (t || MzTimepickerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
MzTimepickerDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzTimepickerDirective, selectors: [["input", "mzTimepicker", ""], ["input", "mz-timepicker", ""]], hostVars: 2, hostBindings: function MzTimepickerDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("timepicker", true);
    } }, inputs: { options: "options", id: "id", placeholder: "placeholder", label: "label" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/** @nocollapse */
MzTimepickerDirective.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional },] },
    { type: ChangeDetectorRef, },
    { type: ElementRef, },
    { type: Renderer, },
    { type: NgZone, },
];
MzTimepickerDirective.propDecorators = {
    "true": [{ type: HostBinding, args: ['class.timepicker',] },],
    "id": [{ type: Input },],
    "placeholder": [{ type: Input },],
    "label": [{ type: Input },],
    "options": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzTimepickerDirective, [{
        type: Directive,
        args: [{
                selector: 'input[mzTimepicker], input[mz-timepicker]'
            }]
    }], function () { return [{ type: ɵngcc2.NgControl, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: Renderer }, { type: ɵngcc0.NgZone }]; }, { options: [{
            type: Input
        }], true: [{
            type: HostBinding,
            args: ['class.timepicker']
        }], id: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], label: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTimepickerModule {
}
MzTimepickerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzTimepickerModule });
MzTimepickerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzTimepickerModule_Factory(t) { return new (t || MzTimepickerModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzTimepickerModule, { declarations: [MzTimepickerDirective, MzTimepickerContainerComponent], exports: [MzTimepickerDirective, MzTimepickerContainerComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzTimepickerModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    MzTimepickerDirective,
                    MzTimepickerContainerComponent,
                ],
                exports: [
                    MzTimepickerDirective,
                    MzTimepickerContainerComponent,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzToastService {
    /**
     * @param {?} message
     * @param {?} displayLength
     * @param {?=} className
     * @param {?=} completeCallback
     * @return {?}
     */
    show(message, displayLength, className, completeCallback) {
        Materialize.toast(message, displayLength, className, completeCallback);
    }
}
MzToastService.ɵfac = function MzToastService_Factory(t) { return new (t || MzToastService)(); };
MzToastService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MzToastService, factory: MzToastService.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzToastService, [{
        type: Injectable
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzToastModule {
}
MzToastModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzToastModule });
MzToastModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzToastModule_Factory(t) { return new (t || MzToastModule)(); }, providers: [MzToastService] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzToastModule, [{
        type: NgModule,
        args: [{
                providers: [MzToastService]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTooltipDirective {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initElements();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.elementRef.nativeElement.getAttribute('type') === 'checkbox') {
            this.targetElement = $(this.elementRef.nativeElement).next('label');
        }
        this.initTooltip();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.targetElement) {
            this.initTooltip();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.renderer.invokeElementMethod(this.targetElement, 'tooltip', ['remove']);
    }
    /**
     * @return {?}
     */
    initElements() {
        this.targetElement = $(this.elementRef.nativeElement);
    }
    /**
     * @return {?}
     */
    initTooltip() {
        const /** @type {?} */ tooltipOptions = {
            delay: isNaN(this.delay) || this.delay == null ? 350 : this.delay,
            html: this.html || false,
            position: this.position || 'bottom',
            tooltip: this.tooltip,
        };
        this.renderer.invokeElementMethod(this.targetElement, 'tooltip', [tooltipOptions]);
    }
}
MzTooltipDirective.ɵfac = function MzTooltipDirective_Factory(t) { return new (t || MzTooltipDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
MzTooltipDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzTooltipDirective, selectors: [["", "mzTooltip", ""], ["", "mz-tooltip", ""]], inputs: { delay: "delay", html: "html", position: "position", tooltip: "tooltip" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/** @nocollapse */
MzTooltipDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];
MzTooltipDirective.propDecorators = {
    "delay": [{ type: Input },],
    "html": [{ type: Input },],
    "position": [{ type: Input },],
    "tooltip": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzTooltipDirective, [{
        type: Directive,
        args: [{
                selector: '[mzTooltip], [mz-tooltip]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: Renderer }]; }, { delay: [{
            type: Input
        }], html: [{
            type: Input
        }], position: [{
            type: Input
        }], tooltip: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzTooltipModule {
}
MzTooltipModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzTooltipModule });
MzTooltipModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzTooltipModule_Factory(t) { return new (t || MzTooltipModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzTooltipModule, { declarations: [MzTooltipDirective], exports: [MzTooltipDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzTooltipModule, [{
        type: NgModule,
        args: [{
                declarations: [MzTooltipDirective],
                exports: [MzTooltipDirective]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MzValidationModule {
}
MzValidationModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MzValidationModule });
MzValidationModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MzValidationModule_Factory(t) { return new (t || MzValidationModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MzValidationModule, { declarations: function () { return [MzErrorMessageComponent, MzValidationComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [MzErrorMessageComponent, MzValidationComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MzValidationModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [
                    MzErrorMessageComponent,
                    MzValidationComponent,
                ],
                entryComponents: [MzErrorMessageComponent],
                exports: [
                    MzErrorMessageComponent,
                    MzValidationComponent,
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ MZ_MODULES = [
    CommonModule,
    FormsModule,
    MzBadgeModule,
    MzButtonModule,
    MzCardModule,
    MzCheckboxModule,
    MzChipModule,
    MzCollapsibleModule,
    MzCollectionModule,
    MzDatepickerModule,
    MzDropdownModule,
    MzFeatureDiscoveryModule,
    MzIconModule,
    MzIconMdiModule,
    MzInjectionModule,
    MzInputModule,
    MzMediaModule,
    MzModalModule,
    MzNavbarModule,
    MzPaginationModule,
    MzParallaxModule,
    MzProgressModule,
    MzRadioButtonModule,
    MzSelectModule,
    MzSidenavModule,
    MzSpinnerModule,
    MzSwitchModule,
    MzTabModule,
    MzTextareaModule,
    MzTimepickerModule,
    MzToastModule,
    MzTooltipModule,
    MzValidationModule,
];
/**
 * @deprecated
 * Import specific component modules instead (MzBadgeModule, MzCardModule, etc)
 * https://github.com/sherweb/ng2-materialize#materializemodule-deprecated
 */
class MaterializeModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: MaterializeModule,
        };
    }
}
MaterializeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MaterializeModule });
MaterializeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MaterializeModule_Factory(t) { return new (t || MaterializeModule)(); }, imports: [MZ_MODULES, CommonModule,
        FormsModule, MzBadgeModule, MzButtonModule, MzCardModule, MzCheckboxModule, MzChipModule, MzCollapsibleModule, MzCollectionModule, MzDatepickerModule, MzDropdownModule, MzFeatureDiscoveryModule, MzIconModule, MzIconMdiModule, MzInjectionModule, MzInputModule, MzMediaModule, MzModalModule, MzNavbarModule, MzPaginationModule, MzParallaxModule, MzProgressModule, MzRadioButtonModule, MzSelectModule, MzSidenavModule, MzSpinnerModule, MzSwitchModule, MzTabModule, MzTextareaModule, MzTimepickerModule, MzToastModule, MzTooltipModule, MzValidationModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MaterializeModule, { imports: [CommonModule,
        FormsModule, MzBadgeModule, MzButtonModule, MzCardModule, MzCheckboxModule, MzChipModule, MzCollapsibleModule, MzCollectionModule, MzDatepickerModule, MzDropdownModule, MzFeatureDiscoveryModule, MzIconModule, MzIconMdiModule, MzInjectionModule, MzInputModule, MzMediaModule, MzModalModule, MzNavbarModule, MzPaginationModule, MzParallaxModule, MzProgressModule, MzRadioButtonModule, MzSelectModule, MzSidenavModule, MzSpinnerModule, MzSwitchModule, MzTabModule, MzTextareaModule, MzTimepickerModule, MzToastModule, MzTooltipModule, MzValidationModule], exports: [CommonModule,
        FormsModule, MzBadgeModule, MzButtonModule, MzCardModule, MzCheckboxModule, MzChipModule, MzCollapsibleModule, MzCollectionModule, MzDatepickerModule, MzDropdownModule, MzFeatureDiscoveryModule, MzIconModule, MzIconMdiModule, MzInjectionModule, MzInputModule, MzMediaModule, MzModalModule, MzNavbarModule, MzPaginationModule, MzParallaxModule, MzProgressModule, MzRadioButtonModule, MzSelectModule, MzSidenavModule, MzSpinnerModule, MzSwitchModule, MzTabModule, MzTextareaModule, MzTimepickerModule, MzToastModule, MzTooltipModule, MzValidationModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MaterializeModule, [{
        type: NgModule,
        args: [{
                imports: MZ_MODULES,
                exports: MZ_MODULES
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
class MatchOperator {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
class Media {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
class MediaBreakpoint {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
class MzBaseModal {
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.modalComponent.openModal();
    }
}
MzBaseModal.ɵfac = function MzBaseModal_Factory(t) { return new (t || MzBaseModal)(); };
MzBaseModal.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MzBaseModal, viewQuery: function MzBaseModal_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(MzModalComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.modalComponent = _t.first);
    } } });
MzBaseModal.propDecorators = {
    "modalComponent": [{ type: ViewChild, args: [MzModalComponent,] },],
};


/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { MzBadgeComponent, MzBadgeModule, MzButtonDirective, MzButtonModule, MzHalfwayFabDirective, MzHalfwayFabModule, MzCardComponent, MzCardImageDirective, MzCardImageTitleDirective, MzCardTitleDirective, MzCardContentDirective, MzCardActionDirective, MzCardModule, MzCheckboxContainerComponent, MzCheckboxDirective, MzCheckboxModule, MzChipInputComponent, MzChipComponent, MzChipModule, MzCollapsibleItemComponent, MzCollapsibleItemBodyDirective, MzCollapsibleItemHeaderDirective, MzCollapsibleComponent, MzCollapsibleModule, MzAvatarDirective, MzCollectionHeaderComponent, MzCollectionItemComponent, MzCollectionLinkDirective, MzCollectionComponent, MzCollectionModule, MzSecondaryContentDirective, MzDatepickerContainerComponent, MzDatepickerDirective, MzDatepickerModule, MzDropdownDividerComponent, MzDropdownItemComponent, MzDropdownComponent, MzDropdownModule, MzFeatureDiscoveryComponent, MzFeatureDiscoveryModule, MzIconDirective, MzIconModule, MzIconMdiDirective, MzIconMdiModule, MzInputContainerComponent, MzInputPrefixDirective, MzInputDirective, MzInputModule, MaterializeModule, MzMediaModule, MzMediaService, MatchOperator, Media, MediaBreakpoint, MzBaseModal, MzModalCloseDirective, MzModalComponent, MzModalHeaderDirective, MzModalContentDirective, MzModalFooterDirective, MzModalModule, MzModalService, MzNavbarComponent, MzNavbarModule, MzNavbarItemComponent, MzNavbarItemContainerComponent, MzPaginationPageButtonComponent, MzPaginationComponent, MzPaginationModule, MzParallaxComponent, MzParallaxModule, MzProgressComponent, MzProgressModule, MzRadioButtonContainerComponent, MzRadioButtonDirective, MzRadioButtonModule, MzSelectContainerComponent, MzSelectDirective, MzSelectModule, Handlers, HandlePropChanges, MzInjectionModule, MzInjectionService, MzRemoveComponentHost, MzSidenavComponent, MzSidenavModule, MzSidenavCollapsibleHeaderComponent, MzSidenavCollapsibleComponent, MzSidenavCollapsibleContentDirective, MzSidenavDividerComponent, MzSidenavHeaderComponent, MzSidenavLinkComponent, MzSidenavSubheaderComponent, MzSpinnerComponent, MzSpinnerModule, MzSwitchContainerComponent, MzSwitchDirective, MzSwitchModule, MzTabItemComponent, MzTabComponent, MzTabModule, MzTextareaContainerComponent, MzTextareaPrefixDirective, MzTextareaDirective, MzTextareaModule, MzTimepickerContainerComponent, MzTimepickerDirective, MzTimepickerModule, MzToastService, MzToastModule, MzTooltipDirective, MzTooltipModule, MzErrorMessageComponent, ErrorMessageResource, MzValidationComponent, MzValidationModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,